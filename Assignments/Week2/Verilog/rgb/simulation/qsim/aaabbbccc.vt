// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2021 16:29:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    converterRGB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module converterRGB_vlg_sample_tst(
	B,
	G,
	R,
	clk,
	sampler_tx
);
input [31:0] B;
input [31:0] G;
input [31:0] R;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(B or G or R or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module converterRGB_vlg_check_tst (
	Cb,
	Cr,
	Y,
	done1,
	done2,
	done3,
	done4,
	nhan1,
	nhan2,
	nhan3,
	nhan4,
	tru1,
	sampler_rx
);
input [31:0] Cb;
input [31:0] Cr;
input [31:0] Y;
input  done1;
input  done2;
input  done3;
input  done4;
input [31:0] nhan1;
input [31:0] nhan2;
input [31:0] nhan3;
input [31:0] nhan4;
input [31:0] tru1;
input sampler_rx;

reg [31:0] Cb_expected;
reg [31:0] Cr_expected;
reg [31:0] Y_expected;
reg  done1_expected;
reg  done2_expected;
reg  done3_expected;
reg  done4_expected;
reg [31:0] nhan1_expected;
reg [31:0] nhan2_expected;
reg [31:0] nhan3_expected;
reg [31:0] nhan4_expected;
reg [31:0] tru1_expected;

reg [31:0] Cb_prev;
reg [31:0] Cr_prev;
reg [31:0] Y_prev;
reg  done1_prev;
reg  done2_prev;
reg  done3_prev;
reg  done4_prev;
reg [31:0] nhan1_prev;
reg [31:0] nhan2_prev;
reg [31:0] nhan3_prev;
reg [31:0] nhan4_prev;
reg [31:0] tru1_prev;

reg [31:0] Cb_expected_prev;
reg [31:0] Cr_expected_prev;
reg [31:0] Y_expected_prev;
reg  done1_expected_prev;
reg  done2_expected_prev;
reg  done3_expected_prev;
reg  done4_expected_prev;
reg [31:0] nhan1_expected_prev;
reg [31:0] nhan2_expected_prev;
reg [31:0] nhan3_expected_prev;
reg [31:0] nhan4_expected_prev;
reg [31:0] tru1_expected_prev;

reg [31:0] last_Cb_exp;
reg [31:0] last_Cr_exp;
reg [31:0] last_Y_exp;
reg  last_done1_exp;
reg  last_done2_exp;
reg  last_done3_exp;
reg  last_done4_exp;
reg [31:0] last_nhan1_exp;
reg [31:0] last_nhan2_exp;
reg [31:0] last_nhan3_exp;
reg [31:0] last_nhan4_exp;
reg [31:0] last_tru1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cb_prev = Cb;
	Cr_prev = Cr;
	Y_prev = Y;
	done1_prev = done1;
	done2_prev = done2;
	done3_prev = done3;
	done4_prev = done4;
	nhan1_prev = nhan1;
	nhan2_prev = nhan2;
	nhan3_prev = nhan3;
	nhan4_prev = nhan4;
	tru1_prev = tru1;
end

// update expected /o prevs

always @(trigger)
begin
	Cb_expected_prev = Cb_expected;
	Cr_expected_prev = Cr_expected;
	Y_expected_prev = Y_expected;
	done1_expected_prev = done1_expected;
	done2_expected_prev = done2_expected;
	done3_expected_prev = done3_expected;
	done4_expected_prev = done4_expected;
	nhan1_expected_prev = nhan1_expected;
	nhan2_expected_prev = nhan2_expected;
	nhan3_expected_prev = nhan3_expected;
	nhan4_expected_prev = nhan4_expected;
	tru1_expected_prev = tru1_expected;
end


// expected Cb[ 31 ]
initial
begin
	Cb_expected[31] = 1'bX;
	Cb_expected[31] = #999000 1'b0;
end 
// expected Cb[ 30 ]
initial
begin
	Cb_expected[30] = 1'bX;
	Cb_expected[30] = #999000 1'b0;
end 
// expected Cb[ 29 ]
initial
begin
	Cb_expected[29] = 1'bX;
	Cb_expected[29] = #999000 1'b0;
end 
// expected Cb[ 28 ]
initial
begin
	Cb_expected[28] = 1'bX;
	Cb_expected[28] = #999000 1'b0;
end 
// expected Cb[ 27 ]
initial
begin
	Cb_expected[27] = 1'bX;
	Cb_expected[27] = #999000 1'b0;
end 
// expected Cb[ 26 ]
initial
begin
	Cb_expected[26] = 1'bX;
	Cb_expected[26] = #999000 1'b0;
end 
// expected Cb[ 25 ]
initial
begin
	Cb_expected[25] = 1'bX;
	Cb_expected[25] = #999000 1'b0;
end 
// expected Cb[ 24 ]
initial
begin
	Cb_expected[24] = 1'bX;
	Cb_expected[24] = #999000 1'b0;
end 
// expected Cb[ 23 ]
initial
begin
	Cb_expected[23] = 1'bX;
	Cb_expected[23] = #999000 1'b0;
end 
// expected Cb[ 22 ]
initial
begin
	Cb_expected[22] = 1'bX;
	Cb_expected[22] = #999000 1'b0;
end 
// expected Cb[ 21 ]
initial
begin
	Cb_expected[21] = 1'bX;
	Cb_expected[21] = #999000 1'b0;
end 
// expected Cb[ 20 ]
initial
begin
	Cb_expected[20] = 1'bX;
	Cb_expected[20] = #999000 1'b0;
end 
// expected Cb[ 19 ]
initial
begin
	Cb_expected[19] = 1'bX;
	Cb_expected[19] = #999000 1'b0;
end 
// expected Cb[ 18 ]
initial
begin
	Cb_expected[18] = 1'bX;
	Cb_expected[18] = #999000 1'b0;
end 
// expected Cb[ 17 ]
initial
begin
	Cb_expected[17] = 1'bX;
	Cb_expected[17] = #999000 1'b0;
end 
// expected Cb[ 16 ]
initial
begin
	Cb_expected[16] = 1'bX;
	Cb_expected[16] = #999000 1'b0;
end 
// expected Cb[ 15 ]
initial
begin
	Cb_expected[15] = 1'bX;
	Cb_expected[15] = #999000 1'b0;
end 
// expected Cb[ 14 ]
initial
begin
	Cb_expected[14] = 1'bX;
	Cb_expected[14] = #999000 1'b0;
end 
// expected Cb[ 13 ]
initial
begin
	Cb_expected[13] = 1'bX;
	Cb_expected[13] = #999000 1'b0;
end 
// expected Cb[ 12 ]
initial
begin
	Cb_expected[12] = 1'bX;
	Cb_expected[12] = #999000 1'b0;
end 
// expected Cb[ 11 ]
initial
begin
	Cb_expected[11] = 1'bX;
	Cb_expected[11] = #999000 1'b0;
end 
// expected Cb[ 10 ]
initial
begin
	Cb_expected[10] = 1'bX;
	Cb_expected[10] = #999000 1'b0;
end 
// expected Cb[ 9 ]
initial
begin
	Cb_expected[9] = 1'bX;
	Cb_expected[9] = #999000 1'b0;
end 
// expected Cb[ 8 ]
initial
begin
	Cb_expected[8] = 1'bX;
	Cb_expected[8] = #999000 1'b0;
end 
// expected Cb[ 7 ]
initial
begin
	Cb_expected[7] = 1'bX;
	Cb_expected[7] = #999000 1'b0;
end 
// expected Cb[ 6 ]
initial
begin
	Cb_expected[6] = 1'bX;
	Cb_expected[6] = #999000 1'b0;
end 
// expected Cb[ 5 ]
initial
begin
	Cb_expected[5] = 1'bX;
	Cb_expected[5] = #999000 1'b0;
end 
// expected Cb[ 4 ]
initial
begin
	Cb_expected[4] = 1'bX;
	Cb_expected[4] = #999000 1'b0;
end 
// expected Cb[ 3 ]
initial
begin
	Cb_expected[3] = 1'bX;
	Cb_expected[3] = #999000 1'b0;
end 
// expected Cb[ 2 ]
initial
begin
	Cb_expected[2] = 1'bX;
	Cb_expected[2] = #999000 1'b0;
end 
// expected Cb[ 1 ]
initial
begin
	Cb_expected[1] = 1'bX;
	Cb_expected[1] = #999000 1'b0;
end 
// expected Cb[ 0 ]
initial
begin
	Cb_expected[0] = 1'bX;
	Cb_expected[0] = #999000 1'b0;
end 
// expected Cr[ 31 ]
initial
begin
	Cr_expected[31] = 1'bX;
	Cr_expected[31] = #999000 1'b0;
end 
// expected Cr[ 30 ]
initial
begin
	Cr_expected[30] = 1'bX;
	Cr_expected[30] = #999000 1'b0;
end 
// expected Cr[ 29 ]
initial
begin
	Cr_expected[29] = 1'bX;
	Cr_expected[29] = #999000 1'b0;
end 
// expected Cr[ 28 ]
initial
begin
	Cr_expected[28] = 1'bX;
	Cr_expected[28] = #999000 1'b0;
end 
// expected Cr[ 27 ]
initial
begin
	Cr_expected[27] = 1'bX;
	Cr_expected[27] = #999000 1'b0;
end 
// expected Cr[ 26 ]
initial
begin
	Cr_expected[26] = 1'bX;
	Cr_expected[26] = #999000 1'b0;
end 
// expected Cr[ 25 ]
initial
begin
	Cr_expected[25] = 1'bX;
	Cr_expected[25] = #999000 1'b0;
end 
// expected Cr[ 24 ]
initial
begin
	Cr_expected[24] = 1'bX;
	Cr_expected[24] = #999000 1'b0;
end 
// expected Cr[ 23 ]
initial
begin
	Cr_expected[23] = 1'bX;
	Cr_expected[23] = #999000 1'b0;
end 
// expected Cr[ 22 ]
initial
begin
	Cr_expected[22] = 1'bX;
	Cr_expected[22] = #999000 1'b0;
end 
// expected Cr[ 21 ]
initial
begin
	Cr_expected[21] = 1'bX;
	Cr_expected[21] = #999000 1'b0;
end 
// expected Cr[ 20 ]
initial
begin
	Cr_expected[20] = 1'bX;
	Cr_expected[20] = #999000 1'b0;
end 
// expected Cr[ 19 ]
initial
begin
	Cr_expected[19] = 1'bX;
	Cr_expected[19] = #999000 1'b0;
end 
// expected Cr[ 18 ]
initial
begin
	Cr_expected[18] = 1'bX;
	Cr_expected[18] = #999000 1'b0;
end 
// expected Cr[ 17 ]
initial
begin
	Cr_expected[17] = 1'bX;
	Cr_expected[17] = #999000 1'b0;
end 
// expected Cr[ 16 ]
initial
begin
	Cr_expected[16] = 1'bX;
	Cr_expected[16] = #999000 1'b0;
end 
// expected Cr[ 15 ]
initial
begin
	Cr_expected[15] = 1'bX;
	Cr_expected[15] = #999000 1'b0;
end 
// expected Cr[ 14 ]
initial
begin
	Cr_expected[14] = 1'bX;
	Cr_expected[14] = #999000 1'b0;
end 
// expected Cr[ 13 ]
initial
begin
	Cr_expected[13] = 1'bX;
	Cr_expected[13] = #999000 1'b0;
end 
// expected Cr[ 12 ]
initial
begin
	Cr_expected[12] = 1'bX;
	Cr_expected[12] = #999000 1'b0;
end 
// expected Cr[ 11 ]
initial
begin
	Cr_expected[11] = 1'bX;
	Cr_expected[11] = #999000 1'b0;
end 
// expected Cr[ 10 ]
initial
begin
	Cr_expected[10] = 1'bX;
	Cr_expected[10] = #999000 1'b0;
end 
// expected Cr[ 9 ]
initial
begin
	Cr_expected[9] = 1'bX;
	Cr_expected[9] = #999000 1'b0;
end 
// expected Cr[ 8 ]
initial
begin
	Cr_expected[8] = 1'bX;
	Cr_expected[8] = #999000 1'b0;
end 
// expected Cr[ 7 ]
initial
begin
	Cr_expected[7] = 1'bX;
	Cr_expected[7] = #999000 1'b0;
end 
// expected Cr[ 6 ]
initial
begin
	Cr_expected[6] = 1'bX;
	Cr_expected[6] = #999000 1'b0;
end 
// expected Cr[ 5 ]
initial
begin
	Cr_expected[5] = 1'bX;
	Cr_expected[5] = #999000 1'b0;
end 
// expected Cr[ 4 ]
initial
begin
	Cr_expected[4] = 1'bX;
	Cr_expected[4] = #999000 1'b0;
end 
// expected Cr[ 3 ]
initial
begin
	Cr_expected[3] = 1'bX;
	Cr_expected[3] = #999000 1'b0;
end 
// expected Cr[ 2 ]
initial
begin
	Cr_expected[2] = 1'bX;
	Cr_expected[2] = #999000 1'b0;
end 
// expected Cr[ 1 ]
initial
begin
	Cr_expected[1] = 1'bX;
	Cr_expected[1] = #999000 1'b0;
end 
// expected Cr[ 0 ]
initial
begin
	Cr_expected[0] = 1'bX;
	Cr_expected[0] = #999000 1'b0;
end 
// expected Y[ 31 ]
initial
begin
	Y_expected[31] = 1'bX;
	Y_expected[31] = #999000 1'b0;
end 
// expected Y[ 30 ]
initial
begin
	Y_expected[30] = 1'bX;
	Y_expected[30] = #999000 1'b0;
end 
// expected Y[ 29 ]
initial
begin
	Y_expected[29] = 1'bX;
	Y_expected[29] = #999000 1'b0;
end 
// expected Y[ 28 ]
initial
begin
	Y_expected[28] = 1'bX;
	Y_expected[28] = #999000 1'b0;
end 
// expected Y[ 27 ]
initial
begin
	Y_expected[27] = 1'bX;
	Y_expected[27] = #999000 1'b0;
end 
// expected Y[ 26 ]
initial
begin
	Y_expected[26] = 1'bX;
	Y_expected[26] = #999000 1'b0;
end 
// expected Y[ 25 ]
initial
begin
	Y_expected[25] = 1'bX;
	Y_expected[25] = #999000 1'b0;
end 
// expected Y[ 24 ]
initial
begin
	Y_expected[24] = 1'bX;
	Y_expected[24] = #999000 1'b0;
end 
// expected Y[ 23 ]
initial
begin
	Y_expected[23] = 1'bX;
	Y_expected[23] = #999000 1'b0;
end 
// expected Y[ 22 ]
initial
begin
	Y_expected[22] = 1'bX;
	Y_expected[22] = #999000 1'b0;
end 
// expected Y[ 21 ]
initial
begin
	Y_expected[21] = 1'bX;
	Y_expected[21] = #999000 1'b0;
end 
// expected Y[ 20 ]
initial
begin
	Y_expected[20] = 1'bX;
	Y_expected[20] = #999000 1'b0;
end 
// expected Y[ 19 ]
initial
begin
	Y_expected[19] = 1'bX;
	Y_expected[19] = #999000 1'b0;
end 
// expected Y[ 18 ]
initial
begin
	Y_expected[18] = 1'bX;
	Y_expected[18] = #999000 1'b0;
end 
// expected Y[ 17 ]
initial
begin
	Y_expected[17] = 1'bX;
	Y_expected[17] = #999000 1'b0;
end 
// expected Y[ 16 ]
initial
begin
	Y_expected[16] = 1'bX;
	Y_expected[16] = #999000 1'b0;
end 
// expected Y[ 15 ]
initial
begin
	Y_expected[15] = 1'bX;
	Y_expected[15] = #999000 1'b0;
end 
// expected Y[ 14 ]
initial
begin
	Y_expected[14] = 1'bX;
	Y_expected[14] = #999000 1'b0;
end 
// expected Y[ 13 ]
initial
begin
	Y_expected[13] = 1'bX;
	Y_expected[13] = #999000 1'b0;
end 
// expected Y[ 12 ]
initial
begin
	Y_expected[12] = 1'bX;
	Y_expected[12] = #999000 1'b0;
end 
// expected Y[ 11 ]
initial
begin
	Y_expected[11] = 1'bX;
	Y_expected[11] = #999000 1'b0;
end 
// expected Y[ 10 ]
initial
begin
	Y_expected[10] = 1'bX;
	Y_expected[10] = #999000 1'b0;
end 
// expected Y[ 9 ]
initial
begin
	Y_expected[9] = 1'bX;
	Y_expected[9] = #999000 1'b0;
end 
// expected Y[ 8 ]
initial
begin
	Y_expected[8] = 1'bX;
	Y_expected[8] = #999000 1'b0;
end 
// expected Y[ 7 ]
initial
begin
	Y_expected[7] = 1'bX;
	Y_expected[7] = #999000 1'b0;
end 
// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
	Y_expected[6] = #999000 1'b0;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
	Y_expected[5] = #999000 1'b0;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
	Y_expected[4] = #999000 1'b0;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
	Y_expected[3] = #999000 1'b0;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
	Y_expected[2] = #999000 1'b0;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
	Y_expected[1] = #999000 1'b0;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
	Y_expected[0] = #999000 1'b0;
end 

// expected done1
initial
begin
	done1_expected = 1'bX;
	done1_expected = #999000 1'b0;
end 

// expected done2
initial
begin
	done2_expected = 1'bX;
	done2_expected = #999000 1'b0;
end 

// expected done3
initial
begin
	done3_expected = 1'bX;
	done3_expected = #999000 1'b0;
end 
// expected nhan1[ 31 ]
initial
begin
	nhan1_expected[31] = 1'bX;
	nhan1_expected[31] = #999000 1'b0;
end 
// expected nhan1[ 30 ]
initial
begin
	nhan1_expected[30] = 1'bX;
	nhan1_expected[30] = #999000 1'b0;
end 
// expected nhan1[ 29 ]
initial
begin
	nhan1_expected[29] = 1'bX;
	nhan1_expected[29] = #999000 1'b0;
end 
// expected nhan1[ 28 ]
initial
begin
	nhan1_expected[28] = 1'bX;
	nhan1_expected[28] = #999000 1'b0;
end 
// expected nhan1[ 27 ]
initial
begin
	nhan1_expected[27] = 1'bX;
	nhan1_expected[27] = #999000 1'b0;
end 
// expected nhan1[ 26 ]
initial
begin
	nhan1_expected[26] = 1'bX;
	nhan1_expected[26] = #999000 1'b0;
end 
// expected nhan1[ 25 ]
initial
begin
	nhan1_expected[25] = 1'bX;
	nhan1_expected[25] = #999000 1'b0;
end 
// expected nhan1[ 24 ]
initial
begin
	nhan1_expected[24] = 1'bX;
	nhan1_expected[24] = #999000 1'b0;
end 
// expected nhan1[ 23 ]
initial
begin
	nhan1_expected[23] = 1'bX;
	nhan1_expected[23] = #999000 1'b0;
end 
// expected nhan1[ 22 ]
initial
begin
	nhan1_expected[22] = 1'bX;
	nhan1_expected[22] = #999000 1'b0;
end 
// expected nhan1[ 21 ]
initial
begin
	nhan1_expected[21] = 1'bX;
	nhan1_expected[21] = #999000 1'b0;
end 
// expected nhan1[ 20 ]
initial
begin
	nhan1_expected[20] = 1'bX;
	nhan1_expected[20] = #999000 1'b0;
end 
// expected nhan1[ 19 ]
initial
begin
	nhan1_expected[19] = 1'bX;
	nhan1_expected[19] = #999000 1'b0;
end 
// expected nhan1[ 18 ]
initial
begin
	nhan1_expected[18] = 1'bX;
	nhan1_expected[18] = #999000 1'b0;
end 
// expected nhan1[ 17 ]
initial
begin
	nhan1_expected[17] = 1'bX;
	nhan1_expected[17] = #999000 1'b0;
end 
// expected nhan1[ 16 ]
initial
begin
	nhan1_expected[16] = 1'bX;
	nhan1_expected[16] = #999000 1'b0;
end 
// expected nhan1[ 15 ]
initial
begin
	nhan1_expected[15] = 1'bX;
	nhan1_expected[15] = #999000 1'b0;
end 
// expected nhan1[ 14 ]
initial
begin
	nhan1_expected[14] = 1'bX;
	nhan1_expected[14] = #999000 1'b0;
end 
// expected nhan1[ 13 ]
initial
begin
	nhan1_expected[13] = 1'bX;
	nhan1_expected[13] = #999000 1'b0;
end 
// expected nhan1[ 12 ]
initial
begin
	nhan1_expected[12] = 1'bX;
	nhan1_expected[12] = #999000 1'b0;
end 
// expected nhan1[ 11 ]
initial
begin
	nhan1_expected[11] = 1'bX;
	nhan1_expected[11] = #999000 1'b0;
end 
// expected nhan1[ 10 ]
initial
begin
	nhan1_expected[10] = 1'bX;
	nhan1_expected[10] = #999000 1'b0;
end 
// expected nhan1[ 9 ]
initial
begin
	nhan1_expected[9] = 1'bX;
	nhan1_expected[9] = #999000 1'b0;
end 
// expected nhan1[ 8 ]
initial
begin
	nhan1_expected[8] = 1'bX;
	nhan1_expected[8] = #999000 1'b0;
end 
// expected nhan1[ 7 ]
initial
begin
	nhan1_expected[7] = 1'bX;
	nhan1_expected[7] = #999000 1'b0;
end 
// expected nhan1[ 6 ]
initial
begin
	nhan1_expected[6] = 1'bX;
	nhan1_expected[6] = #999000 1'b0;
end 
// expected nhan1[ 5 ]
initial
begin
	nhan1_expected[5] = 1'bX;
	nhan1_expected[5] = #999000 1'b0;
end 
// expected nhan1[ 4 ]
initial
begin
	nhan1_expected[4] = 1'bX;
	nhan1_expected[4] = #999000 1'b0;
end 
// expected nhan1[ 3 ]
initial
begin
	nhan1_expected[3] = 1'bX;
	nhan1_expected[3] = #999000 1'b0;
end 
// expected nhan1[ 2 ]
initial
begin
	nhan1_expected[2] = 1'bX;
	nhan1_expected[2] = #999000 1'b0;
end 
// expected nhan1[ 1 ]
initial
begin
	nhan1_expected[1] = 1'bX;
	nhan1_expected[1] = #999000 1'b0;
end 
// expected nhan1[ 0 ]
initial
begin
	nhan1_expected[0] = 1'bX;
	nhan1_expected[0] = #999000 1'b0;
end 
// expected nhan2[ 31 ]
initial
begin
	nhan2_expected[31] = 1'bX;
	nhan2_expected[31] = #999000 1'b0;
end 
// expected nhan2[ 30 ]
initial
begin
	nhan2_expected[30] = 1'bX;
	nhan2_expected[30] = #999000 1'b0;
end 
// expected nhan2[ 29 ]
initial
begin
	nhan2_expected[29] = 1'bX;
	nhan2_expected[29] = #999000 1'b0;
end 
// expected nhan2[ 28 ]
initial
begin
	nhan2_expected[28] = 1'bX;
	nhan2_expected[28] = #999000 1'b0;
end 
// expected nhan2[ 27 ]
initial
begin
	nhan2_expected[27] = 1'bX;
	nhan2_expected[27] = #999000 1'b0;
end 
// expected nhan2[ 26 ]
initial
begin
	nhan2_expected[26] = 1'bX;
	nhan2_expected[26] = #999000 1'b0;
end 
// expected nhan2[ 25 ]
initial
begin
	nhan2_expected[25] = 1'bX;
	nhan2_expected[25] = #999000 1'b0;
end 
// expected nhan2[ 24 ]
initial
begin
	nhan2_expected[24] = 1'bX;
	nhan2_expected[24] = #999000 1'b0;
end 
// expected nhan2[ 23 ]
initial
begin
	nhan2_expected[23] = 1'bX;
	nhan2_expected[23] = #999000 1'b0;
end 
// expected nhan2[ 22 ]
initial
begin
	nhan2_expected[22] = 1'bX;
	nhan2_expected[22] = #999000 1'b0;
end 
// expected nhan2[ 21 ]
initial
begin
	nhan2_expected[21] = 1'bX;
	nhan2_expected[21] = #999000 1'b0;
end 
// expected nhan2[ 20 ]
initial
begin
	nhan2_expected[20] = 1'bX;
	nhan2_expected[20] = #999000 1'b0;
end 
// expected nhan2[ 19 ]
initial
begin
	nhan2_expected[19] = 1'bX;
	nhan2_expected[19] = #999000 1'b0;
end 
// expected nhan2[ 18 ]
initial
begin
	nhan2_expected[18] = 1'bX;
	nhan2_expected[18] = #999000 1'b0;
end 
// expected nhan2[ 17 ]
initial
begin
	nhan2_expected[17] = 1'bX;
	nhan2_expected[17] = #999000 1'b0;
end 
// expected nhan2[ 16 ]
initial
begin
	nhan2_expected[16] = 1'bX;
	nhan2_expected[16] = #999000 1'b0;
end 
// expected nhan2[ 15 ]
initial
begin
	nhan2_expected[15] = 1'bX;
	nhan2_expected[15] = #999000 1'b0;
end 
// expected nhan2[ 14 ]
initial
begin
	nhan2_expected[14] = 1'bX;
	nhan2_expected[14] = #999000 1'b0;
end 
// expected nhan2[ 13 ]
initial
begin
	nhan2_expected[13] = 1'bX;
	nhan2_expected[13] = #999000 1'b0;
end 
// expected nhan2[ 12 ]
initial
begin
	nhan2_expected[12] = 1'bX;
	nhan2_expected[12] = #999000 1'b0;
end 
// expected nhan2[ 11 ]
initial
begin
	nhan2_expected[11] = 1'bX;
	nhan2_expected[11] = #999000 1'b0;
end 
// expected nhan2[ 10 ]
initial
begin
	nhan2_expected[10] = 1'bX;
	nhan2_expected[10] = #999000 1'b0;
end 
// expected nhan2[ 9 ]
initial
begin
	nhan2_expected[9] = 1'bX;
	nhan2_expected[9] = #999000 1'b0;
end 
// expected nhan2[ 8 ]
initial
begin
	nhan2_expected[8] = 1'bX;
	nhan2_expected[8] = #999000 1'b0;
end 
// expected nhan2[ 7 ]
initial
begin
	nhan2_expected[7] = 1'bX;
	nhan2_expected[7] = #999000 1'b0;
end 
// expected nhan2[ 6 ]
initial
begin
	nhan2_expected[6] = 1'bX;
	nhan2_expected[6] = #999000 1'b0;
end 
// expected nhan2[ 5 ]
initial
begin
	nhan2_expected[5] = 1'bX;
	nhan2_expected[5] = #999000 1'b0;
end 
// expected nhan2[ 4 ]
initial
begin
	nhan2_expected[4] = 1'bX;
	nhan2_expected[4] = #999000 1'b0;
end 
// expected nhan2[ 3 ]
initial
begin
	nhan2_expected[3] = 1'bX;
	nhan2_expected[3] = #999000 1'b0;
end 
// expected nhan2[ 2 ]
initial
begin
	nhan2_expected[2] = 1'bX;
	nhan2_expected[2] = #999000 1'b0;
end 
// expected nhan2[ 1 ]
initial
begin
	nhan2_expected[1] = 1'bX;
	nhan2_expected[1] = #999000 1'b0;
end 
// expected nhan2[ 0 ]
initial
begin
	nhan2_expected[0] = 1'bX;
	nhan2_expected[0] = #999000 1'b0;
end 
// expected nhan3[ 31 ]
initial
begin
	nhan3_expected[31] = 1'bX;
	nhan3_expected[31] = #999000 1'b0;
end 
// expected nhan3[ 30 ]
initial
begin
	nhan3_expected[30] = 1'bX;
	nhan3_expected[30] = #999000 1'b0;
end 
// expected nhan3[ 29 ]
initial
begin
	nhan3_expected[29] = 1'bX;
	nhan3_expected[29] = #999000 1'b0;
end 
// expected nhan3[ 28 ]
initial
begin
	nhan3_expected[28] = 1'bX;
	nhan3_expected[28] = #999000 1'b0;
end 
// expected nhan3[ 27 ]
initial
begin
	nhan3_expected[27] = 1'bX;
	nhan3_expected[27] = #999000 1'b0;
end 
// expected nhan3[ 26 ]
initial
begin
	nhan3_expected[26] = 1'bX;
	nhan3_expected[26] = #999000 1'b0;
end 
// expected nhan3[ 25 ]
initial
begin
	nhan3_expected[25] = 1'bX;
	nhan3_expected[25] = #999000 1'b0;
end 
// expected nhan3[ 24 ]
initial
begin
	nhan3_expected[24] = 1'bX;
	nhan3_expected[24] = #999000 1'b0;
end 
// expected nhan3[ 23 ]
initial
begin
	nhan3_expected[23] = 1'bX;
	nhan3_expected[23] = #999000 1'b0;
end 
// expected nhan3[ 22 ]
initial
begin
	nhan3_expected[22] = 1'bX;
	nhan3_expected[22] = #999000 1'b0;
end 
// expected nhan3[ 21 ]
initial
begin
	nhan3_expected[21] = 1'bX;
	nhan3_expected[21] = #999000 1'b0;
end 
// expected nhan3[ 20 ]
initial
begin
	nhan3_expected[20] = 1'bX;
	nhan3_expected[20] = #999000 1'b0;
end 
// expected nhan3[ 19 ]
initial
begin
	nhan3_expected[19] = 1'bX;
	nhan3_expected[19] = #999000 1'b0;
end 
// expected nhan3[ 18 ]
initial
begin
	nhan3_expected[18] = 1'bX;
	nhan3_expected[18] = #999000 1'b0;
end 
// expected nhan3[ 17 ]
initial
begin
	nhan3_expected[17] = 1'bX;
	nhan3_expected[17] = #999000 1'b0;
end 
// expected nhan3[ 16 ]
initial
begin
	nhan3_expected[16] = 1'bX;
	nhan3_expected[16] = #999000 1'b0;
end 
// expected nhan3[ 15 ]
initial
begin
	nhan3_expected[15] = 1'bX;
	nhan3_expected[15] = #999000 1'b0;
end 
// expected nhan3[ 14 ]
initial
begin
	nhan3_expected[14] = 1'bX;
	nhan3_expected[14] = #999000 1'b0;
end 
// expected nhan3[ 13 ]
initial
begin
	nhan3_expected[13] = 1'bX;
	nhan3_expected[13] = #999000 1'b0;
end 
// expected nhan3[ 12 ]
initial
begin
	nhan3_expected[12] = 1'bX;
	nhan3_expected[12] = #999000 1'b0;
end 
// expected nhan3[ 11 ]
initial
begin
	nhan3_expected[11] = 1'bX;
	nhan3_expected[11] = #999000 1'b0;
end 
// expected nhan3[ 10 ]
initial
begin
	nhan3_expected[10] = 1'bX;
	nhan3_expected[10] = #999000 1'b0;
end 
// expected nhan3[ 9 ]
initial
begin
	nhan3_expected[9] = 1'bX;
	nhan3_expected[9] = #999000 1'b0;
end 
// expected nhan3[ 8 ]
initial
begin
	nhan3_expected[8] = 1'bX;
	nhan3_expected[8] = #999000 1'b0;
end 
// expected nhan3[ 7 ]
initial
begin
	nhan3_expected[7] = 1'bX;
	nhan3_expected[7] = #999000 1'b0;
end 
// expected nhan3[ 6 ]
initial
begin
	nhan3_expected[6] = 1'bX;
	nhan3_expected[6] = #999000 1'b0;
end 
// expected nhan3[ 5 ]
initial
begin
	nhan3_expected[5] = 1'bX;
	nhan3_expected[5] = #999000 1'b0;
end 
// expected nhan3[ 4 ]
initial
begin
	nhan3_expected[4] = 1'bX;
	nhan3_expected[4] = #999000 1'b0;
end 
// expected nhan3[ 3 ]
initial
begin
	nhan3_expected[3] = 1'bX;
	nhan3_expected[3] = #999000 1'b0;
end 
// expected nhan3[ 2 ]
initial
begin
	nhan3_expected[2] = 1'bX;
	nhan3_expected[2] = #999000 1'b0;
end 
// expected nhan3[ 1 ]
initial
begin
	nhan3_expected[1] = 1'bX;
	nhan3_expected[1] = #999000 1'b0;
end 
// expected nhan3[ 0 ]
initial
begin
	nhan3_expected[0] = 1'bX;
	nhan3_expected[0] = #999000 1'b0;
end 

// expected done4
initial
begin
	done4_expected = 1'bX;
end 
// expected tru1[ 31 ]
initial
begin
	tru1_expected[31] = 1'bX;
end 
// expected tru1[ 30 ]
initial
begin
	tru1_expected[30] = 1'bX;
end 
// expected tru1[ 29 ]
initial
begin
	tru1_expected[29] = 1'bX;
end 
// expected tru1[ 28 ]
initial
begin
	tru1_expected[28] = 1'bX;
end 
// expected tru1[ 27 ]
initial
begin
	tru1_expected[27] = 1'bX;
end 
// expected tru1[ 26 ]
initial
begin
	tru1_expected[26] = 1'bX;
end 
// expected tru1[ 25 ]
initial
begin
	tru1_expected[25] = 1'bX;
end 
// expected tru1[ 24 ]
initial
begin
	tru1_expected[24] = 1'bX;
end 
// expected tru1[ 23 ]
initial
begin
	tru1_expected[23] = 1'bX;
end 
// expected tru1[ 22 ]
initial
begin
	tru1_expected[22] = 1'bX;
end 
// expected tru1[ 21 ]
initial
begin
	tru1_expected[21] = 1'bX;
end 
// expected tru1[ 20 ]
initial
begin
	tru1_expected[20] = 1'bX;
end 
// expected tru1[ 19 ]
initial
begin
	tru1_expected[19] = 1'bX;
end 
// expected tru1[ 18 ]
initial
begin
	tru1_expected[18] = 1'bX;
end 
// expected tru1[ 17 ]
initial
begin
	tru1_expected[17] = 1'bX;
end 
// expected tru1[ 16 ]
initial
begin
	tru1_expected[16] = 1'bX;
end 
// expected tru1[ 15 ]
initial
begin
	tru1_expected[15] = 1'bX;
end 
// expected tru1[ 14 ]
initial
begin
	tru1_expected[14] = 1'bX;
end 
// expected tru1[ 13 ]
initial
begin
	tru1_expected[13] = 1'bX;
end 
// expected tru1[ 12 ]
initial
begin
	tru1_expected[12] = 1'bX;
end 
// expected tru1[ 11 ]
initial
begin
	tru1_expected[11] = 1'bX;
end 
// expected tru1[ 10 ]
initial
begin
	tru1_expected[10] = 1'bX;
end 
// expected tru1[ 9 ]
initial
begin
	tru1_expected[9] = 1'bX;
end 
// expected tru1[ 8 ]
initial
begin
	tru1_expected[8] = 1'bX;
end 
// expected tru1[ 7 ]
initial
begin
	tru1_expected[7] = 1'bX;
end 
// expected tru1[ 6 ]
initial
begin
	tru1_expected[6] = 1'bX;
end 
// expected tru1[ 5 ]
initial
begin
	tru1_expected[5] = 1'bX;
end 
// expected tru1[ 4 ]
initial
begin
	tru1_expected[4] = 1'bX;
end 
// expected tru1[ 3 ]
initial
begin
	tru1_expected[3] = 1'bX;
end 
// expected tru1[ 2 ]
initial
begin
	tru1_expected[2] = 1'bX;
end 
// expected tru1[ 1 ]
initial
begin
	tru1_expected[1] = 1'bX;
end 
// expected tru1[ 0 ]
initial
begin
	tru1_expected[0] = 1'bX;
end 
// expected nhan4[ 31 ]
initial
begin
	nhan4_expected[31] = 1'bX;
end 
// expected nhan4[ 30 ]
initial
begin
	nhan4_expected[30] = 1'bX;
end 
// expected nhan4[ 29 ]
initial
begin
	nhan4_expected[29] = 1'bX;
end 
// expected nhan4[ 28 ]
initial
begin
	nhan4_expected[28] = 1'bX;
end 
// expected nhan4[ 27 ]
initial
begin
	nhan4_expected[27] = 1'bX;
end 
// expected nhan4[ 26 ]
initial
begin
	nhan4_expected[26] = 1'bX;
end 
// expected nhan4[ 25 ]
initial
begin
	nhan4_expected[25] = 1'bX;
end 
// expected nhan4[ 24 ]
initial
begin
	nhan4_expected[24] = 1'bX;
end 
// expected nhan4[ 23 ]
initial
begin
	nhan4_expected[23] = 1'bX;
end 
// expected nhan4[ 22 ]
initial
begin
	nhan4_expected[22] = 1'bX;
end 
// expected nhan4[ 21 ]
initial
begin
	nhan4_expected[21] = 1'bX;
end 
// expected nhan4[ 20 ]
initial
begin
	nhan4_expected[20] = 1'bX;
end 
// expected nhan4[ 19 ]
initial
begin
	nhan4_expected[19] = 1'bX;
end 
// expected nhan4[ 18 ]
initial
begin
	nhan4_expected[18] = 1'bX;
end 
// expected nhan4[ 17 ]
initial
begin
	nhan4_expected[17] = 1'bX;
end 
// expected nhan4[ 16 ]
initial
begin
	nhan4_expected[16] = 1'bX;
end 
// expected nhan4[ 15 ]
initial
begin
	nhan4_expected[15] = 1'bX;
end 
// expected nhan4[ 14 ]
initial
begin
	nhan4_expected[14] = 1'bX;
end 
// expected nhan4[ 13 ]
initial
begin
	nhan4_expected[13] = 1'bX;
end 
// expected nhan4[ 12 ]
initial
begin
	nhan4_expected[12] = 1'bX;
end 
// expected nhan4[ 11 ]
initial
begin
	nhan4_expected[11] = 1'bX;
end 
// expected nhan4[ 10 ]
initial
begin
	nhan4_expected[10] = 1'bX;
end 
// expected nhan4[ 9 ]
initial
begin
	nhan4_expected[9] = 1'bX;
end 
// expected nhan4[ 8 ]
initial
begin
	nhan4_expected[8] = 1'bX;
end 
// expected nhan4[ 7 ]
initial
begin
	nhan4_expected[7] = 1'bX;
end 
// expected nhan4[ 6 ]
initial
begin
	nhan4_expected[6] = 1'bX;
end 
// expected nhan4[ 5 ]
initial
begin
	nhan4_expected[5] = 1'bX;
end 
// expected nhan4[ 4 ]
initial
begin
	nhan4_expected[4] = 1'bX;
end 
// expected nhan4[ 3 ]
initial
begin
	nhan4_expected[3] = 1'bX;
end 
// expected nhan4[ 2 ]
initial
begin
	nhan4_expected[2] = 1'bX;
end 
// expected nhan4[ 1 ]
initial
begin
	nhan4_expected[1] = 1'bX;
end 
// expected nhan4[ 0 ]
initial
begin
	nhan4_expected[0] = 1'bX;
end 
// generate trigger
always @(Cb_expected or Cb or Cr_expected or Cr or Y_expected or Y or done1_expected or done1 or done2_expected or done2 or done3_expected or done3 or done4_expected or done4 or nhan1_expected or nhan1 or nhan2_expected or nhan2 or nhan3_expected or nhan3 or nhan4_expected or nhan4 or tru1_expected or tru1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cb = %b | expected Cr = %b | expected Y = %b | expected done1 = %b | expected done2 = %b | expected done3 = %b | expected done4 = %b | expected nhan1 = %b | expected nhan2 = %b | expected nhan3 = %b | expected nhan4 = %b | expected tru1 = %b | ",Cb_expected_prev,Cr_expected_prev,Y_expected_prev,done1_expected_prev,done2_expected_prev,done3_expected_prev,done4_expected_prev,nhan1_expected_prev,nhan2_expected_prev,nhan3_expected_prev,nhan4_expected_prev,tru1_expected_prev);
	$display("| real Cb = %b | real Cr = %b | real Y = %b | real done1 = %b | real done2 = %b | real done3 = %b | real done4 = %b | real nhan1 = %b | real nhan2 = %b | real nhan3 = %b | real nhan4 = %b | real tru1 = %b | ",Cb_prev,Cr_prev,Y_prev,done1_prev,done2_prev,done3_prev,done4_prev,nhan1_prev,nhan2_prev,nhan3_prev,nhan4_prev,tru1_prev);
`endif
	if (
		( Cb_expected_prev[0] !== 1'bx ) && ( Cb_prev[0] !== Cb_expected_prev[0] )
		&& ((Cb_expected_prev[0] !== last_Cb_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[0] = Cb_expected_prev[0];
	end
	if (
		( Cb_expected_prev[1] !== 1'bx ) && ( Cb_prev[1] !== Cb_expected_prev[1] )
		&& ((Cb_expected_prev[1] !== last_Cb_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[1] = Cb_expected_prev[1];
	end
	if (
		( Cb_expected_prev[2] !== 1'bx ) && ( Cb_prev[2] !== Cb_expected_prev[2] )
		&& ((Cb_expected_prev[2] !== last_Cb_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[2] = Cb_expected_prev[2];
	end
	if (
		( Cb_expected_prev[3] !== 1'bx ) && ( Cb_prev[3] !== Cb_expected_prev[3] )
		&& ((Cb_expected_prev[3] !== last_Cb_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[3] = Cb_expected_prev[3];
	end
	if (
		( Cb_expected_prev[4] !== 1'bx ) && ( Cb_prev[4] !== Cb_expected_prev[4] )
		&& ((Cb_expected_prev[4] !== last_Cb_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[4] = Cb_expected_prev[4];
	end
	if (
		( Cb_expected_prev[5] !== 1'bx ) && ( Cb_prev[5] !== Cb_expected_prev[5] )
		&& ((Cb_expected_prev[5] !== last_Cb_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[5] = Cb_expected_prev[5];
	end
	if (
		( Cb_expected_prev[6] !== 1'bx ) && ( Cb_prev[6] !== Cb_expected_prev[6] )
		&& ((Cb_expected_prev[6] !== last_Cb_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[6] = Cb_expected_prev[6];
	end
	if (
		( Cb_expected_prev[7] !== 1'bx ) && ( Cb_prev[7] !== Cb_expected_prev[7] )
		&& ((Cb_expected_prev[7] !== last_Cb_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[7] = Cb_expected_prev[7];
	end
	if (
		( Cb_expected_prev[8] !== 1'bx ) && ( Cb_prev[8] !== Cb_expected_prev[8] )
		&& ((Cb_expected_prev[8] !== last_Cb_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[8] = Cb_expected_prev[8];
	end
	if (
		( Cb_expected_prev[9] !== 1'bx ) && ( Cb_prev[9] !== Cb_expected_prev[9] )
		&& ((Cb_expected_prev[9] !== last_Cb_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[9] = Cb_expected_prev[9];
	end
	if (
		( Cb_expected_prev[10] !== 1'bx ) && ( Cb_prev[10] !== Cb_expected_prev[10] )
		&& ((Cb_expected_prev[10] !== last_Cb_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[10] = Cb_expected_prev[10];
	end
	if (
		( Cb_expected_prev[11] !== 1'bx ) && ( Cb_prev[11] !== Cb_expected_prev[11] )
		&& ((Cb_expected_prev[11] !== last_Cb_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[11] = Cb_expected_prev[11];
	end
	if (
		( Cb_expected_prev[12] !== 1'bx ) && ( Cb_prev[12] !== Cb_expected_prev[12] )
		&& ((Cb_expected_prev[12] !== last_Cb_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[12] = Cb_expected_prev[12];
	end
	if (
		( Cb_expected_prev[13] !== 1'bx ) && ( Cb_prev[13] !== Cb_expected_prev[13] )
		&& ((Cb_expected_prev[13] !== last_Cb_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[13] = Cb_expected_prev[13];
	end
	if (
		( Cb_expected_prev[14] !== 1'bx ) && ( Cb_prev[14] !== Cb_expected_prev[14] )
		&& ((Cb_expected_prev[14] !== last_Cb_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[14] = Cb_expected_prev[14];
	end
	if (
		( Cb_expected_prev[15] !== 1'bx ) && ( Cb_prev[15] !== Cb_expected_prev[15] )
		&& ((Cb_expected_prev[15] !== last_Cb_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[15] = Cb_expected_prev[15];
	end
	if (
		( Cb_expected_prev[16] !== 1'bx ) && ( Cb_prev[16] !== Cb_expected_prev[16] )
		&& ((Cb_expected_prev[16] !== last_Cb_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[16] = Cb_expected_prev[16];
	end
	if (
		( Cb_expected_prev[17] !== 1'bx ) && ( Cb_prev[17] !== Cb_expected_prev[17] )
		&& ((Cb_expected_prev[17] !== last_Cb_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[17] = Cb_expected_prev[17];
	end
	if (
		( Cb_expected_prev[18] !== 1'bx ) && ( Cb_prev[18] !== Cb_expected_prev[18] )
		&& ((Cb_expected_prev[18] !== last_Cb_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[18] = Cb_expected_prev[18];
	end
	if (
		( Cb_expected_prev[19] !== 1'bx ) && ( Cb_prev[19] !== Cb_expected_prev[19] )
		&& ((Cb_expected_prev[19] !== last_Cb_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[19] = Cb_expected_prev[19];
	end
	if (
		( Cb_expected_prev[20] !== 1'bx ) && ( Cb_prev[20] !== Cb_expected_prev[20] )
		&& ((Cb_expected_prev[20] !== last_Cb_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[20] = Cb_expected_prev[20];
	end
	if (
		( Cb_expected_prev[21] !== 1'bx ) && ( Cb_prev[21] !== Cb_expected_prev[21] )
		&& ((Cb_expected_prev[21] !== last_Cb_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[21] = Cb_expected_prev[21];
	end
	if (
		( Cb_expected_prev[22] !== 1'bx ) && ( Cb_prev[22] !== Cb_expected_prev[22] )
		&& ((Cb_expected_prev[22] !== last_Cb_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[22] = Cb_expected_prev[22];
	end
	if (
		( Cb_expected_prev[23] !== 1'bx ) && ( Cb_prev[23] !== Cb_expected_prev[23] )
		&& ((Cb_expected_prev[23] !== last_Cb_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[23] = Cb_expected_prev[23];
	end
	if (
		( Cb_expected_prev[24] !== 1'bx ) && ( Cb_prev[24] !== Cb_expected_prev[24] )
		&& ((Cb_expected_prev[24] !== last_Cb_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[24] = Cb_expected_prev[24];
	end
	if (
		( Cb_expected_prev[25] !== 1'bx ) && ( Cb_prev[25] !== Cb_expected_prev[25] )
		&& ((Cb_expected_prev[25] !== last_Cb_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[25] = Cb_expected_prev[25];
	end
	if (
		( Cb_expected_prev[26] !== 1'bx ) && ( Cb_prev[26] !== Cb_expected_prev[26] )
		&& ((Cb_expected_prev[26] !== last_Cb_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[26] = Cb_expected_prev[26];
	end
	if (
		( Cb_expected_prev[27] !== 1'bx ) && ( Cb_prev[27] !== Cb_expected_prev[27] )
		&& ((Cb_expected_prev[27] !== last_Cb_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[27] = Cb_expected_prev[27];
	end
	if (
		( Cb_expected_prev[28] !== 1'bx ) && ( Cb_prev[28] !== Cb_expected_prev[28] )
		&& ((Cb_expected_prev[28] !== last_Cb_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[28] = Cb_expected_prev[28];
	end
	if (
		( Cb_expected_prev[29] !== 1'bx ) && ( Cb_prev[29] !== Cb_expected_prev[29] )
		&& ((Cb_expected_prev[29] !== last_Cb_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[29] = Cb_expected_prev[29];
	end
	if (
		( Cb_expected_prev[30] !== 1'bx ) && ( Cb_prev[30] !== Cb_expected_prev[30] )
		&& ((Cb_expected_prev[30] !== last_Cb_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[30] = Cb_expected_prev[30];
	end
	if (
		( Cb_expected_prev[31] !== 1'bx ) && ( Cb_prev[31] !== Cb_expected_prev[31] )
		&& ((Cb_expected_prev[31] !== last_Cb_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cb[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cb_expected_prev);
		$display ("     Real value = %b", Cb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cb_exp[31] = Cb_expected_prev[31];
	end
	if (
		( Cr_expected_prev[0] !== 1'bx ) && ( Cr_prev[0] !== Cr_expected_prev[0] )
		&& ((Cr_expected_prev[0] !== last_Cr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[0] = Cr_expected_prev[0];
	end
	if (
		( Cr_expected_prev[1] !== 1'bx ) && ( Cr_prev[1] !== Cr_expected_prev[1] )
		&& ((Cr_expected_prev[1] !== last_Cr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[1] = Cr_expected_prev[1];
	end
	if (
		( Cr_expected_prev[2] !== 1'bx ) && ( Cr_prev[2] !== Cr_expected_prev[2] )
		&& ((Cr_expected_prev[2] !== last_Cr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[2] = Cr_expected_prev[2];
	end
	if (
		( Cr_expected_prev[3] !== 1'bx ) && ( Cr_prev[3] !== Cr_expected_prev[3] )
		&& ((Cr_expected_prev[3] !== last_Cr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[3] = Cr_expected_prev[3];
	end
	if (
		( Cr_expected_prev[4] !== 1'bx ) && ( Cr_prev[4] !== Cr_expected_prev[4] )
		&& ((Cr_expected_prev[4] !== last_Cr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[4] = Cr_expected_prev[4];
	end
	if (
		( Cr_expected_prev[5] !== 1'bx ) && ( Cr_prev[5] !== Cr_expected_prev[5] )
		&& ((Cr_expected_prev[5] !== last_Cr_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[5] = Cr_expected_prev[5];
	end
	if (
		( Cr_expected_prev[6] !== 1'bx ) && ( Cr_prev[6] !== Cr_expected_prev[6] )
		&& ((Cr_expected_prev[6] !== last_Cr_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[6] = Cr_expected_prev[6];
	end
	if (
		( Cr_expected_prev[7] !== 1'bx ) && ( Cr_prev[7] !== Cr_expected_prev[7] )
		&& ((Cr_expected_prev[7] !== last_Cr_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[7] = Cr_expected_prev[7];
	end
	if (
		( Cr_expected_prev[8] !== 1'bx ) && ( Cr_prev[8] !== Cr_expected_prev[8] )
		&& ((Cr_expected_prev[8] !== last_Cr_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[8] = Cr_expected_prev[8];
	end
	if (
		( Cr_expected_prev[9] !== 1'bx ) && ( Cr_prev[9] !== Cr_expected_prev[9] )
		&& ((Cr_expected_prev[9] !== last_Cr_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[9] = Cr_expected_prev[9];
	end
	if (
		( Cr_expected_prev[10] !== 1'bx ) && ( Cr_prev[10] !== Cr_expected_prev[10] )
		&& ((Cr_expected_prev[10] !== last_Cr_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[10] = Cr_expected_prev[10];
	end
	if (
		( Cr_expected_prev[11] !== 1'bx ) && ( Cr_prev[11] !== Cr_expected_prev[11] )
		&& ((Cr_expected_prev[11] !== last_Cr_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[11] = Cr_expected_prev[11];
	end
	if (
		( Cr_expected_prev[12] !== 1'bx ) && ( Cr_prev[12] !== Cr_expected_prev[12] )
		&& ((Cr_expected_prev[12] !== last_Cr_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[12] = Cr_expected_prev[12];
	end
	if (
		( Cr_expected_prev[13] !== 1'bx ) && ( Cr_prev[13] !== Cr_expected_prev[13] )
		&& ((Cr_expected_prev[13] !== last_Cr_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[13] = Cr_expected_prev[13];
	end
	if (
		( Cr_expected_prev[14] !== 1'bx ) && ( Cr_prev[14] !== Cr_expected_prev[14] )
		&& ((Cr_expected_prev[14] !== last_Cr_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[14] = Cr_expected_prev[14];
	end
	if (
		( Cr_expected_prev[15] !== 1'bx ) && ( Cr_prev[15] !== Cr_expected_prev[15] )
		&& ((Cr_expected_prev[15] !== last_Cr_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[15] = Cr_expected_prev[15];
	end
	if (
		( Cr_expected_prev[16] !== 1'bx ) && ( Cr_prev[16] !== Cr_expected_prev[16] )
		&& ((Cr_expected_prev[16] !== last_Cr_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[16] = Cr_expected_prev[16];
	end
	if (
		( Cr_expected_prev[17] !== 1'bx ) && ( Cr_prev[17] !== Cr_expected_prev[17] )
		&& ((Cr_expected_prev[17] !== last_Cr_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[17] = Cr_expected_prev[17];
	end
	if (
		( Cr_expected_prev[18] !== 1'bx ) && ( Cr_prev[18] !== Cr_expected_prev[18] )
		&& ((Cr_expected_prev[18] !== last_Cr_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[18] = Cr_expected_prev[18];
	end
	if (
		( Cr_expected_prev[19] !== 1'bx ) && ( Cr_prev[19] !== Cr_expected_prev[19] )
		&& ((Cr_expected_prev[19] !== last_Cr_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[19] = Cr_expected_prev[19];
	end
	if (
		( Cr_expected_prev[20] !== 1'bx ) && ( Cr_prev[20] !== Cr_expected_prev[20] )
		&& ((Cr_expected_prev[20] !== last_Cr_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[20] = Cr_expected_prev[20];
	end
	if (
		( Cr_expected_prev[21] !== 1'bx ) && ( Cr_prev[21] !== Cr_expected_prev[21] )
		&& ((Cr_expected_prev[21] !== last_Cr_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[21] = Cr_expected_prev[21];
	end
	if (
		( Cr_expected_prev[22] !== 1'bx ) && ( Cr_prev[22] !== Cr_expected_prev[22] )
		&& ((Cr_expected_prev[22] !== last_Cr_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[22] = Cr_expected_prev[22];
	end
	if (
		( Cr_expected_prev[23] !== 1'bx ) && ( Cr_prev[23] !== Cr_expected_prev[23] )
		&& ((Cr_expected_prev[23] !== last_Cr_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[23] = Cr_expected_prev[23];
	end
	if (
		( Cr_expected_prev[24] !== 1'bx ) && ( Cr_prev[24] !== Cr_expected_prev[24] )
		&& ((Cr_expected_prev[24] !== last_Cr_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[24] = Cr_expected_prev[24];
	end
	if (
		( Cr_expected_prev[25] !== 1'bx ) && ( Cr_prev[25] !== Cr_expected_prev[25] )
		&& ((Cr_expected_prev[25] !== last_Cr_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[25] = Cr_expected_prev[25];
	end
	if (
		( Cr_expected_prev[26] !== 1'bx ) && ( Cr_prev[26] !== Cr_expected_prev[26] )
		&& ((Cr_expected_prev[26] !== last_Cr_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[26] = Cr_expected_prev[26];
	end
	if (
		( Cr_expected_prev[27] !== 1'bx ) && ( Cr_prev[27] !== Cr_expected_prev[27] )
		&& ((Cr_expected_prev[27] !== last_Cr_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[27] = Cr_expected_prev[27];
	end
	if (
		( Cr_expected_prev[28] !== 1'bx ) && ( Cr_prev[28] !== Cr_expected_prev[28] )
		&& ((Cr_expected_prev[28] !== last_Cr_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[28] = Cr_expected_prev[28];
	end
	if (
		( Cr_expected_prev[29] !== 1'bx ) && ( Cr_prev[29] !== Cr_expected_prev[29] )
		&& ((Cr_expected_prev[29] !== last_Cr_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[29] = Cr_expected_prev[29];
	end
	if (
		( Cr_expected_prev[30] !== 1'bx ) && ( Cr_prev[30] !== Cr_expected_prev[30] )
		&& ((Cr_expected_prev[30] !== last_Cr_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[30] = Cr_expected_prev[30];
	end
	if (
		( Cr_expected_prev[31] !== 1'bx ) && ( Cr_prev[31] !== Cr_expected_prev[31] )
		&& ((Cr_expected_prev[31] !== last_Cr_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cr_expected_prev);
		$display ("     Real value = %b", Cr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cr_exp[31] = Cr_expected_prev[31];
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end
	if (
		( Y_expected_prev[7] !== 1'bx ) && ( Y_prev[7] !== Y_expected_prev[7] )
		&& ((Y_expected_prev[7] !== last_Y_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[7] = Y_expected_prev[7];
	end
	if (
		( Y_expected_prev[8] !== 1'bx ) && ( Y_prev[8] !== Y_expected_prev[8] )
		&& ((Y_expected_prev[8] !== last_Y_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[8] = Y_expected_prev[8];
	end
	if (
		( Y_expected_prev[9] !== 1'bx ) && ( Y_prev[9] !== Y_expected_prev[9] )
		&& ((Y_expected_prev[9] !== last_Y_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[9] = Y_expected_prev[9];
	end
	if (
		( Y_expected_prev[10] !== 1'bx ) && ( Y_prev[10] !== Y_expected_prev[10] )
		&& ((Y_expected_prev[10] !== last_Y_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[10] = Y_expected_prev[10];
	end
	if (
		( Y_expected_prev[11] !== 1'bx ) && ( Y_prev[11] !== Y_expected_prev[11] )
		&& ((Y_expected_prev[11] !== last_Y_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[11] = Y_expected_prev[11];
	end
	if (
		( Y_expected_prev[12] !== 1'bx ) && ( Y_prev[12] !== Y_expected_prev[12] )
		&& ((Y_expected_prev[12] !== last_Y_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[12] = Y_expected_prev[12];
	end
	if (
		( Y_expected_prev[13] !== 1'bx ) && ( Y_prev[13] !== Y_expected_prev[13] )
		&& ((Y_expected_prev[13] !== last_Y_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[13] = Y_expected_prev[13];
	end
	if (
		( Y_expected_prev[14] !== 1'bx ) && ( Y_prev[14] !== Y_expected_prev[14] )
		&& ((Y_expected_prev[14] !== last_Y_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[14] = Y_expected_prev[14];
	end
	if (
		( Y_expected_prev[15] !== 1'bx ) && ( Y_prev[15] !== Y_expected_prev[15] )
		&& ((Y_expected_prev[15] !== last_Y_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[15] = Y_expected_prev[15];
	end
	if (
		( Y_expected_prev[16] !== 1'bx ) && ( Y_prev[16] !== Y_expected_prev[16] )
		&& ((Y_expected_prev[16] !== last_Y_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[16] = Y_expected_prev[16];
	end
	if (
		( Y_expected_prev[17] !== 1'bx ) && ( Y_prev[17] !== Y_expected_prev[17] )
		&& ((Y_expected_prev[17] !== last_Y_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[17] = Y_expected_prev[17];
	end
	if (
		( Y_expected_prev[18] !== 1'bx ) && ( Y_prev[18] !== Y_expected_prev[18] )
		&& ((Y_expected_prev[18] !== last_Y_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[18] = Y_expected_prev[18];
	end
	if (
		( Y_expected_prev[19] !== 1'bx ) && ( Y_prev[19] !== Y_expected_prev[19] )
		&& ((Y_expected_prev[19] !== last_Y_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[19] = Y_expected_prev[19];
	end
	if (
		( Y_expected_prev[20] !== 1'bx ) && ( Y_prev[20] !== Y_expected_prev[20] )
		&& ((Y_expected_prev[20] !== last_Y_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[20] = Y_expected_prev[20];
	end
	if (
		( Y_expected_prev[21] !== 1'bx ) && ( Y_prev[21] !== Y_expected_prev[21] )
		&& ((Y_expected_prev[21] !== last_Y_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[21] = Y_expected_prev[21];
	end
	if (
		( Y_expected_prev[22] !== 1'bx ) && ( Y_prev[22] !== Y_expected_prev[22] )
		&& ((Y_expected_prev[22] !== last_Y_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[22] = Y_expected_prev[22];
	end
	if (
		( Y_expected_prev[23] !== 1'bx ) && ( Y_prev[23] !== Y_expected_prev[23] )
		&& ((Y_expected_prev[23] !== last_Y_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[23] = Y_expected_prev[23];
	end
	if (
		( Y_expected_prev[24] !== 1'bx ) && ( Y_prev[24] !== Y_expected_prev[24] )
		&& ((Y_expected_prev[24] !== last_Y_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[24] = Y_expected_prev[24];
	end
	if (
		( Y_expected_prev[25] !== 1'bx ) && ( Y_prev[25] !== Y_expected_prev[25] )
		&& ((Y_expected_prev[25] !== last_Y_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[25] = Y_expected_prev[25];
	end
	if (
		( Y_expected_prev[26] !== 1'bx ) && ( Y_prev[26] !== Y_expected_prev[26] )
		&& ((Y_expected_prev[26] !== last_Y_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[26] = Y_expected_prev[26];
	end
	if (
		( Y_expected_prev[27] !== 1'bx ) && ( Y_prev[27] !== Y_expected_prev[27] )
		&& ((Y_expected_prev[27] !== last_Y_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[27] = Y_expected_prev[27];
	end
	if (
		( Y_expected_prev[28] !== 1'bx ) && ( Y_prev[28] !== Y_expected_prev[28] )
		&& ((Y_expected_prev[28] !== last_Y_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[28] = Y_expected_prev[28];
	end
	if (
		( Y_expected_prev[29] !== 1'bx ) && ( Y_prev[29] !== Y_expected_prev[29] )
		&& ((Y_expected_prev[29] !== last_Y_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[29] = Y_expected_prev[29];
	end
	if (
		( Y_expected_prev[30] !== 1'bx ) && ( Y_prev[30] !== Y_expected_prev[30] )
		&& ((Y_expected_prev[30] !== last_Y_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[30] = Y_expected_prev[30];
	end
	if (
		( Y_expected_prev[31] !== 1'bx ) && ( Y_prev[31] !== Y_expected_prev[31] )
		&& ((Y_expected_prev[31] !== last_Y_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[31] = Y_expected_prev[31];
	end
	if (
		( done1_expected_prev !== 1'bx ) && ( done1_prev !== done1_expected_prev )
		&& ((done1_expected_prev !== last_done1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done1_expected_prev);
		$display ("     Real value = %b", done1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_done1_exp = done1_expected_prev;
	end
	if (
		( done2_expected_prev !== 1'bx ) && ( done2_prev !== done2_expected_prev )
		&& ((done2_expected_prev !== last_done2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done2_expected_prev);
		$display ("     Real value = %b", done2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_done2_exp = done2_expected_prev;
	end
	if (
		( done3_expected_prev !== 1'bx ) && ( done3_prev !== done3_expected_prev )
		&& ((done3_expected_prev !== last_done3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done3_expected_prev);
		$display ("     Real value = %b", done3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_done3_exp = done3_expected_prev;
	end
	if (
		( done4_expected_prev !== 1'bx ) && ( done4_prev !== done4_expected_prev )
		&& ((done4_expected_prev !== last_done4_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port done4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", done4_expected_prev);
		$display ("     Real value = %b", done4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_done4_exp = done4_expected_prev;
	end
	if (
		( nhan1_expected_prev[0] !== 1'bx ) && ( nhan1_prev[0] !== nhan1_expected_prev[0] )
		&& ((nhan1_expected_prev[0] !== last_nhan1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[0] = nhan1_expected_prev[0];
	end
	if (
		( nhan1_expected_prev[1] !== 1'bx ) && ( nhan1_prev[1] !== nhan1_expected_prev[1] )
		&& ((nhan1_expected_prev[1] !== last_nhan1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[1] = nhan1_expected_prev[1];
	end
	if (
		( nhan1_expected_prev[2] !== 1'bx ) && ( nhan1_prev[2] !== nhan1_expected_prev[2] )
		&& ((nhan1_expected_prev[2] !== last_nhan1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[2] = nhan1_expected_prev[2];
	end
	if (
		( nhan1_expected_prev[3] !== 1'bx ) && ( nhan1_prev[3] !== nhan1_expected_prev[3] )
		&& ((nhan1_expected_prev[3] !== last_nhan1_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[3] = nhan1_expected_prev[3];
	end
	if (
		( nhan1_expected_prev[4] !== 1'bx ) && ( nhan1_prev[4] !== nhan1_expected_prev[4] )
		&& ((nhan1_expected_prev[4] !== last_nhan1_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[4] = nhan1_expected_prev[4];
	end
	if (
		( nhan1_expected_prev[5] !== 1'bx ) && ( nhan1_prev[5] !== nhan1_expected_prev[5] )
		&& ((nhan1_expected_prev[5] !== last_nhan1_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[5] = nhan1_expected_prev[5];
	end
	if (
		( nhan1_expected_prev[6] !== 1'bx ) && ( nhan1_prev[6] !== nhan1_expected_prev[6] )
		&& ((nhan1_expected_prev[6] !== last_nhan1_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[6] = nhan1_expected_prev[6];
	end
	if (
		( nhan1_expected_prev[7] !== 1'bx ) && ( nhan1_prev[7] !== nhan1_expected_prev[7] )
		&& ((nhan1_expected_prev[7] !== last_nhan1_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[7] = nhan1_expected_prev[7];
	end
	if (
		( nhan1_expected_prev[8] !== 1'bx ) && ( nhan1_prev[8] !== nhan1_expected_prev[8] )
		&& ((nhan1_expected_prev[8] !== last_nhan1_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[8] = nhan1_expected_prev[8];
	end
	if (
		( nhan1_expected_prev[9] !== 1'bx ) && ( nhan1_prev[9] !== nhan1_expected_prev[9] )
		&& ((nhan1_expected_prev[9] !== last_nhan1_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[9] = nhan1_expected_prev[9];
	end
	if (
		( nhan1_expected_prev[10] !== 1'bx ) && ( nhan1_prev[10] !== nhan1_expected_prev[10] )
		&& ((nhan1_expected_prev[10] !== last_nhan1_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[10] = nhan1_expected_prev[10];
	end
	if (
		( nhan1_expected_prev[11] !== 1'bx ) && ( nhan1_prev[11] !== nhan1_expected_prev[11] )
		&& ((nhan1_expected_prev[11] !== last_nhan1_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[11] = nhan1_expected_prev[11];
	end
	if (
		( nhan1_expected_prev[12] !== 1'bx ) && ( nhan1_prev[12] !== nhan1_expected_prev[12] )
		&& ((nhan1_expected_prev[12] !== last_nhan1_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[12] = nhan1_expected_prev[12];
	end
	if (
		( nhan1_expected_prev[13] !== 1'bx ) && ( nhan1_prev[13] !== nhan1_expected_prev[13] )
		&& ((nhan1_expected_prev[13] !== last_nhan1_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[13] = nhan1_expected_prev[13];
	end
	if (
		( nhan1_expected_prev[14] !== 1'bx ) && ( nhan1_prev[14] !== nhan1_expected_prev[14] )
		&& ((nhan1_expected_prev[14] !== last_nhan1_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[14] = nhan1_expected_prev[14];
	end
	if (
		( nhan1_expected_prev[15] !== 1'bx ) && ( nhan1_prev[15] !== nhan1_expected_prev[15] )
		&& ((nhan1_expected_prev[15] !== last_nhan1_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[15] = nhan1_expected_prev[15];
	end
	if (
		( nhan1_expected_prev[16] !== 1'bx ) && ( nhan1_prev[16] !== nhan1_expected_prev[16] )
		&& ((nhan1_expected_prev[16] !== last_nhan1_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[16] = nhan1_expected_prev[16];
	end
	if (
		( nhan1_expected_prev[17] !== 1'bx ) && ( nhan1_prev[17] !== nhan1_expected_prev[17] )
		&& ((nhan1_expected_prev[17] !== last_nhan1_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[17] = nhan1_expected_prev[17];
	end
	if (
		( nhan1_expected_prev[18] !== 1'bx ) && ( nhan1_prev[18] !== nhan1_expected_prev[18] )
		&& ((nhan1_expected_prev[18] !== last_nhan1_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[18] = nhan1_expected_prev[18];
	end
	if (
		( nhan1_expected_prev[19] !== 1'bx ) && ( nhan1_prev[19] !== nhan1_expected_prev[19] )
		&& ((nhan1_expected_prev[19] !== last_nhan1_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[19] = nhan1_expected_prev[19];
	end
	if (
		( nhan1_expected_prev[20] !== 1'bx ) && ( nhan1_prev[20] !== nhan1_expected_prev[20] )
		&& ((nhan1_expected_prev[20] !== last_nhan1_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[20] = nhan1_expected_prev[20];
	end
	if (
		( nhan1_expected_prev[21] !== 1'bx ) && ( nhan1_prev[21] !== nhan1_expected_prev[21] )
		&& ((nhan1_expected_prev[21] !== last_nhan1_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[21] = nhan1_expected_prev[21];
	end
	if (
		( nhan1_expected_prev[22] !== 1'bx ) && ( nhan1_prev[22] !== nhan1_expected_prev[22] )
		&& ((nhan1_expected_prev[22] !== last_nhan1_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[22] = nhan1_expected_prev[22];
	end
	if (
		( nhan1_expected_prev[23] !== 1'bx ) && ( nhan1_prev[23] !== nhan1_expected_prev[23] )
		&& ((nhan1_expected_prev[23] !== last_nhan1_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[23] = nhan1_expected_prev[23];
	end
	if (
		( nhan1_expected_prev[24] !== 1'bx ) && ( nhan1_prev[24] !== nhan1_expected_prev[24] )
		&& ((nhan1_expected_prev[24] !== last_nhan1_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[24] = nhan1_expected_prev[24];
	end
	if (
		( nhan1_expected_prev[25] !== 1'bx ) && ( nhan1_prev[25] !== nhan1_expected_prev[25] )
		&& ((nhan1_expected_prev[25] !== last_nhan1_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[25] = nhan1_expected_prev[25];
	end
	if (
		( nhan1_expected_prev[26] !== 1'bx ) && ( nhan1_prev[26] !== nhan1_expected_prev[26] )
		&& ((nhan1_expected_prev[26] !== last_nhan1_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[26] = nhan1_expected_prev[26];
	end
	if (
		( nhan1_expected_prev[27] !== 1'bx ) && ( nhan1_prev[27] !== nhan1_expected_prev[27] )
		&& ((nhan1_expected_prev[27] !== last_nhan1_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[27] = nhan1_expected_prev[27];
	end
	if (
		( nhan1_expected_prev[28] !== 1'bx ) && ( nhan1_prev[28] !== nhan1_expected_prev[28] )
		&& ((nhan1_expected_prev[28] !== last_nhan1_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[28] = nhan1_expected_prev[28];
	end
	if (
		( nhan1_expected_prev[29] !== 1'bx ) && ( nhan1_prev[29] !== nhan1_expected_prev[29] )
		&& ((nhan1_expected_prev[29] !== last_nhan1_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[29] = nhan1_expected_prev[29];
	end
	if (
		( nhan1_expected_prev[30] !== 1'bx ) && ( nhan1_prev[30] !== nhan1_expected_prev[30] )
		&& ((nhan1_expected_prev[30] !== last_nhan1_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[30] = nhan1_expected_prev[30];
	end
	if (
		( nhan1_expected_prev[31] !== 1'bx ) && ( nhan1_prev[31] !== nhan1_expected_prev[31] )
		&& ((nhan1_expected_prev[31] !== last_nhan1_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan1_expected_prev);
		$display ("     Real value = %b", nhan1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_nhan1_exp[31] = nhan1_expected_prev[31];
	end
	if (
		( nhan2_expected_prev[0] !== 1'bx ) && ( nhan2_prev[0] !== nhan2_expected_prev[0] )
		&& ((nhan2_expected_prev[0] !== last_nhan2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[0] = nhan2_expected_prev[0];
	end
	if (
		( nhan2_expected_prev[1] !== 1'bx ) && ( nhan2_prev[1] !== nhan2_expected_prev[1] )
		&& ((nhan2_expected_prev[1] !== last_nhan2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[1] = nhan2_expected_prev[1];
	end
	if (
		( nhan2_expected_prev[2] !== 1'bx ) && ( nhan2_prev[2] !== nhan2_expected_prev[2] )
		&& ((nhan2_expected_prev[2] !== last_nhan2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[2] = nhan2_expected_prev[2];
	end
	if (
		( nhan2_expected_prev[3] !== 1'bx ) && ( nhan2_prev[3] !== nhan2_expected_prev[3] )
		&& ((nhan2_expected_prev[3] !== last_nhan2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[3] = nhan2_expected_prev[3];
	end
	if (
		( nhan2_expected_prev[4] !== 1'bx ) && ( nhan2_prev[4] !== nhan2_expected_prev[4] )
		&& ((nhan2_expected_prev[4] !== last_nhan2_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[4] = nhan2_expected_prev[4];
	end
	if (
		( nhan2_expected_prev[5] !== 1'bx ) && ( nhan2_prev[5] !== nhan2_expected_prev[5] )
		&& ((nhan2_expected_prev[5] !== last_nhan2_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[5] = nhan2_expected_prev[5];
	end
	if (
		( nhan2_expected_prev[6] !== 1'bx ) && ( nhan2_prev[6] !== nhan2_expected_prev[6] )
		&& ((nhan2_expected_prev[6] !== last_nhan2_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[6] = nhan2_expected_prev[6];
	end
	if (
		( nhan2_expected_prev[7] !== 1'bx ) && ( nhan2_prev[7] !== nhan2_expected_prev[7] )
		&& ((nhan2_expected_prev[7] !== last_nhan2_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[7] = nhan2_expected_prev[7];
	end
	if (
		( nhan2_expected_prev[8] !== 1'bx ) && ( nhan2_prev[8] !== nhan2_expected_prev[8] )
		&& ((nhan2_expected_prev[8] !== last_nhan2_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[8] = nhan2_expected_prev[8];
	end
	if (
		( nhan2_expected_prev[9] !== 1'bx ) && ( nhan2_prev[9] !== nhan2_expected_prev[9] )
		&& ((nhan2_expected_prev[9] !== last_nhan2_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[9] = nhan2_expected_prev[9];
	end
	if (
		( nhan2_expected_prev[10] !== 1'bx ) && ( nhan2_prev[10] !== nhan2_expected_prev[10] )
		&& ((nhan2_expected_prev[10] !== last_nhan2_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[10] = nhan2_expected_prev[10];
	end
	if (
		( nhan2_expected_prev[11] !== 1'bx ) && ( nhan2_prev[11] !== nhan2_expected_prev[11] )
		&& ((nhan2_expected_prev[11] !== last_nhan2_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[11] = nhan2_expected_prev[11];
	end
	if (
		( nhan2_expected_prev[12] !== 1'bx ) && ( nhan2_prev[12] !== nhan2_expected_prev[12] )
		&& ((nhan2_expected_prev[12] !== last_nhan2_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[12] = nhan2_expected_prev[12];
	end
	if (
		( nhan2_expected_prev[13] !== 1'bx ) && ( nhan2_prev[13] !== nhan2_expected_prev[13] )
		&& ((nhan2_expected_prev[13] !== last_nhan2_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[13] = nhan2_expected_prev[13];
	end
	if (
		( nhan2_expected_prev[14] !== 1'bx ) && ( nhan2_prev[14] !== nhan2_expected_prev[14] )
		&& ((nhan2_expected_prev[14] !== last_nhan2_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[14] = nhan2_expected_prev[14];
	end
	if (
		( nhan2_expected_prev[15] !== 1'bx ) && ( nhan2_prev[15] !== nhan2_expected_prev[15] )
		&& ((nhan2_expected_prev[15] !== last_nhan2_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[15] = nhan2_expected_prev[15];
	end
	if (
		( nhan2_expected_prev[16] !== 1'bx ) && ( nhan2_prev[16] !== nhan2_expected_prev[16] )
		&& ((nhan2_expected_prev[16] !== last_nhan2_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[16] = nhan2_expected_prev[16];
	end
	if (
		( nhan2_expected_prev[17] !== 1'bx ) && ( nhan2_prev[17] !== nhan2_expected_prev[17] )
		&& ((nhan2_expected_prev[17] !== last_nhan2_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[17] = nhan2_expected_prev[17];
	end
	if (
		( nhan2_expected_prev[18] !== 1'bx ) && ( nhan2_prev[18] !== nhan2_expected_prev[18] )
		&& ((nhan2_expected_prev[18] !== last_nhan2_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[18] = nhan2_expected_prev[18];
	end
	if (
		( nhan2_expected_prev[19] !== 1'bx ) && ( nhan2_prev[19] !== nhan2_expected_prev[19] )
		&& ((nhan2_expected_prev[19] !== last_nhan2_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[19] = nhan2_expected_prev[19];
	end
	if (
		( nhan2_expected_prev[20] !== 1'bx ) && ( nhan2_prev[20] !== nhan2_expected_prev[20] )
		&& ((nhan2_expected_prev[20] !== last_nhan2_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[20] = nhan2_expected_prev[20];
	end
	if (
		( nhan2_expected_prev[21] !== 1'bx ) && ( nhan2_prev[21] !== nhan2_expected_prev[21] )
		&& ((nhan2_expected_prev[21] !== last_nhan2_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[21] = nhan2_expected_prev[21];
	end
	if (
		( nhan2_expected_prev[22] !== 1'bx ) && ( nhan2_prev[22] !== nhan2_expected_prev[22] )
		&& ((nhan2_expected_prev[22] !== last_nhan2_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[22] = nhan2_expected_prev[22];
	end
	if (
		( nhan2_expected_prev[23] !== 1'bx ) && ( nhan2_prev[23] !== nhan2_expected_prev[23] )
		&& ((nhan2_expected_prev[23] !== last_nhan2_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[23] = nhan2_expected_prev[23];
	end
	if (
		( nhan2_expected_prev[24] !== 1'bx ) && ( nhan2_prev[24] !== nhan2_expected_prev[24] )
		&& ((nhan2_expected_prev[24] !== last_nhan2_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[24] = nhan2_expected_prev[24];
	end
	if (
		( nhan2_expected_prev[25] !== 1'bx ) && ( nhan2_prev[25] !== nhan2_expected_prev[25] )
		&& ((nhan2_expected_prev[25] !== last_nhan2_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[25] = nhan2_expected_prev[25];
	end
	if (
		( nhan2_expected_prev[26] !== 1'bx ) && ( nhan2_prev[26] !== nhan2_expected_prev[26] )
		&& ((nhan2_expected_prev[26] !== last_nhan2_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[26] = nhan2_expected_prev[26];
	end
	if (
		( nhan2_expected_prev[27] !== 1'bx ) && ( nhan2_prev[27] !== nhan2_expected_prev[27] )
		&& ((nhan2_expected_prev[27] !== last_nhan2_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[27] = nhan2_expected_prev[27];
	end
	if (
		( nhan2_expected_prev[28] !== 1'bx ) && ( nhan2_prev[28] !== nhan2_expected_prev[28] )
		&& ((nhan2_expected_prev[28] !== last_nhan2_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[28] = nhan2_expected_prev[28];
	end
	if (
		( nhan2_expected_prev[29] !== 1'bx ) && ( nhan2_prev[29] !== nhan2_expected_prev[29] )
		&& ((nhan2_expected_prev[29] !== last_nhan2_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[29] = nhan2_expected_prev[29];
	end
	if (
		( nhan2_expected_prev[30] !== 1'bx ) && ( nhan2_prev[30] !== nhan2_expected_prev[30] )
		&& ((nhan2_expected_prev[30] !== last_nhan2_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[30] = nhan2_expected_prev[30];
	end
	if (
		( nhan2_expected_prev[31] !== 1'bx ) && ( nhan2_prev[31] !== nhan2_expected_prev[31] )
		&& ((nhan2_expected_prev[31] !== last_nhan2_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan2_expected_prev);
		$display ("     Real value = %b", nhan2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nhan2_exp[31] = nhan2_expected_prev[31];
	end
	if (
		( nhan3_expected_prev[0] !== 1'bx ) && ( nhan3_prev[0] !== nhan3_expected_prev[0] )
		&& ((nhan3_expected_prev[0] !== last_nhan3_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[0] = nhan3_expected_prev[0];
	end
	if (
		( nhan3_expected_prev[1] !== 1'bx ) && ( nhan3_prev[1] !== nhan3_expected_prev[1] )
		&& ((nhan3_expected_prev[1] !== last_nhan3_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[1] = nhan3_expected_prev[1];
	end
	if (
		( nhan3_expected_prev[2] !== 1'bx ) && ( nhan3_prev[2] !== nhan3_expected_prev[2] )
		&& ((nhan3_expected_prev[2] !== last_nhan3_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[2] = nhan3_expected_prev[2];
	end
	if (
		( nhan3_expected_prev[3] !== 1'bx ) && ( nhan3_prev[3] !== nhan3_expected_prev[3] )
		&& ((nhan3_expected_prev[3] !== last_nhan3_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[3] = nhan3_expected_prev[3];
	end
	if (
		( nhan3_expected_prev[4] !== 1'bx ) && ( nhan3_prev[4] !== nhan3_expected_prev[4] )
		&& ((nhan3_expected_prev[4] !== last_nhan3_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[4] = nhan3_expected_prev[4];
	end
	if (
		( nhan3_expected_prev[5] !== 1'bx ) && ( nhan3_prev[5] !== nhan3_expected_prev[5] )
		&& ((nhan3_expected_prev[5] !== last_nhan3_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[5] = nhan3_expected_prev[5];
	end
	if (
		( nhan3_expected_prev[6] !== 1'bx ) && ( nhan3_prev[6] !== nhan3_expected_prev[6] )
		&& ((nhan3_expected_prev[6] !== last_nhan3_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[6] = nhan3_expected_prev[6];
	end
	if (
		( nhan3_expected_prev[7] !== 1'bx ) && ( nhan3_prev[7] !== nhan3_expected_prev[7] )
		&& ((nhan3_expected_prev[7] !== last_nhan3_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[7] = nhan3_expected_prev[7];
	end
	if (
		( nhan3_expected_prev[8] !== 1'bx ) && ( nhan3_prev[8] !== nhan3_expected_prev[8] )
		&& ((nhan3_expected_prev[8] !== last_nhan3_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[8] = nhan3_expected_prev[8];
	end
	if (
		( nhan3_expected_prev[9] !== 1'bx ) && ( nhan3_prev[9] !== nhan3_expected_prev[9] )
		&& ((nhan3_expected_prev[9] !== last_nhan3_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[9] = nhan3_expected_prev[9];
	end
	if (
		( nhan3_expected_prev[10] !== 1'bx ) && ( nhan3_prev[10] !== nhan3_expected_prev[10] )
		&& ((nhan3_expected_prev[10] !== last_nhan3_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[10] = nhan3_expected_prev[10];
	end
	if (
		( nhan3_expected_prev[11] !== 1'bx ) && ( nhan3_prev[11] !== nhan3_expected_prev[11] )
		&& ((nhan3_expected_prev[11] !== last_nhan3_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[11] = nhan3_expected_prev[11];
	end
	if (
		( nhan3_expected_prev[12] !== 1'bx ) && ( nhan3_prev[12] !== nhan3_expected_prev[12] )
		&& ((nhan3_expected_prev[12] !== last_nhan3_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[12] = nhan3_expected_prev[12];
	end
	if (
		( nhan3_expected_prev[13] !== 1'bx ) && ( nhan3_prev[13] !== nhan3_expected_prev[13] )
		&& ((nhan3_expected_prev[13] !== last_nhan3_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[13] = nhan3_expected_prev[13];
	end
	if (
		( nhan3_expected_prev[14] !== 1'bx ) && ( nhan3_prev[14] !== nhan3_expected_prev[14] )
		&& ((nhan3_expected_prev[14] !== last_nhan3_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[14] = nhan3_expected_prev[14];
	end
	if (
		( nhan3_expected_prev[15] !== 1'bx ) && ( nhan3_prev[15] !== nhan3_expected_prev[15] )
		&& ((nhan3_expected_prev[15] !== last_nhan3_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[15] = nhan3_expected_prev[15];
	end
	if (
		( nhan3_expected_prev[16] !== 1'bx ) && ( nhan3_prev[16] !== nhan3_expected_prev[16] )
		&& ((nhan3_expected_prev[16] !== last_nhan3_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[16] = nhan3_expected_prev[16];
	end
	if (
		( nhan3_expected_prev[17] !== 1'bx ) && ( nhan3_prev[17] !== nhan3_expected_prev[17] )
		&& ((nhan3_expected_prev[17] !== last_nhan3_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[17] = nhan3_expected_prev[17];
	end
	if (
		( nhan3_expected_prev[18] !== 1'bx ) && ( nhan3_prev[18] !== nhan3_expected_prev[18] )
		&& ((nhan3_expected_prev[18] !== last_nhan3_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[18] = nhan3_expected_prev[18];
	end
	if (
		( nhan3_expected_prev[19] !== 1'bx ) && ( nhan3_prev[19] !== nhan3_expected_prev[19] )
		&& ((nhan3_expected_prev[19] !== last_nhan3_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[19] = nhan3_expected_prev[19];
	end
	if (
		( nhan3_expected_prev[20] !== 1'bx ) && ( nhan3_prev[20] !== nhan3_expected_prev[20] )
		&& ((nhan3_expected_prev[20] !== last_nhan3_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[20] = nhan3_expected_prev[20];
	end
	if (
		( nhan3_expected_prev[21] !== 1'bx ) && ( nhan3_prev[21] !== nhan3_expected_prev[21] )
		&& ((nhan3_expected_prev[21] !== last_nhan3_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[21] = nhan3_expected_prev[21];
	end
	if (
		( nhan3_expected_prev[22] !== 1'bx ) && ( nhan3_prev[22] !== nhan3_expected_prev[22] )
		&& ((nhan3_expected_prev[22] !== last_nhan3_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[22] = nhan3_expected_prev[22];
	end
	if (
		( nhan3_expected_prev[23] !== 1'bx ) && ( nhan3_prev[23] !== nhan3_expected_prev[23] )
		&& ((nhan3_expected_prev[23] !== last_nhan3_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[23] = nhan3_expected_prev[23];
	end
	if (
		( nhan3_expected_prev[24] !== 1'bx ) && ( nhan3_prev[24] !== nhan3_expected_prev[24] )
		&& ((nhan3_expected_prev[24] !== last_nhan3_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[24] = nhan3_expected_prev[24];
	end
	if (
		( nhan3_expected_prev[25] !== 1'bx ) && ( nhan3_prev[25] !== nhan3_expected_prev[25] )
		&& ((nhan3_expected_prev[25] !== last_nhan3_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[25] = nhan3_expected_prev[25];
	end
	if (
		( nhan3_expected_prev[26] !== 1'bx ) && ( nhan3_prev[26] !== nhan3_expected_prev[26] )
		&& ((nhan3_expected_prev[26] !== last_nhan3_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[26] = nhan3_expected_prev[26];
	end
	if (
		( nhan3_expected_prev[27] !== 1'bx ) && ( nhan3_prev[27] !== nhan3_expected_prev[27] )
		&& ((nhan3_expected_prev[27] !== last_nhan3_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[27] = nhan3_expected_prev[27];
	end
	if (
		( nhan3_expected_prev[28] !== 1'bx ) && ( nhan3_prev[28] !== nhan3_expected_prev[28] )
		&& ((nhan3_expected_prev[28] !== last_nhan3_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[28] = nhan3_expected_prev[28];
	end
	if (
		( nhan3_expected_prev[29] !== 1'bx ) && ( nhan3_prev[29] !== nhan3_expected_prev[29] )
		&& ((nhan3_expected_prev[29] !== last_nhan3_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[29] = nhan3_expected_prev[29];
	end
	if (
		( nhan3_expected_prev[30] !== 1'bx ) && ( nhan3_prev[30] !== nhan3_expected_prev[30] )
		&& ((nhan3_expected_prev[30] !== last_nhan3_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[30] = nhan3_expected_prev[30];
	end
	if (
		( nhan3_expected_prev[31] !== 1'bx ) && ( nhan3_prev[31] !== nhan3_expected_prev[31] )
		&& ((nhan3_expected_prev[31] !== last_nhan3_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan3_expected_prev);
		$display ("     Real value = %b", nhan3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nhan3_exp[31] = nhan3_expected_prev[31];
	end
	if (
		( nhan4_expected_prev[0] !== 1'bx ) && ( nhan4_prev[0] !== nhan4_expected_prev[0] )
		&& ((nhan4_expected_prev[0] !== last_nhan4_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[0] = nhan4_expected_prev[0];
	end
	if (
		( nhan4_expected_prev[1] !== 1'bx ) && ( nhan4_prev[1] !== nhan4_expected_prev[1] )
		&& ((nhan4_expected_prev[1] !== last_nhan4_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[1] = nhan4_expected_prev[1];
	end
	if (
		( nhan4_expected_prev[2] !== 1'bx ) && ( nhan4_prev[2] !== nhan4_expected_prev[2] )
		&& ((nhan4_expected_prev[2] !== last_nhan4_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[2] = nhan4_expected_prev[2];
	end
	if (
		( nhan4_expected_prev[3] !== 1'bx ) && ( nhan4_prev[3] !== nhan4_expected_prev[3] )
		&& ((nhan4_expected_prev[3] !== last_nhan4_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[3] = nhan4_expected_prev[3];
	end
	if (
		( nhan4_expected_prev[4] !== 1'bx ) && ( nhan4_prev[4] !== nhan4_expected_prev[4] )
		&& ((nhan4_expected_prev[4] !== last_nhan4_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[4] = nhan4_expected_prev[4];
	end
	if (
		( nhan4_expected_prev[5] !== 1'bx ) && ( nhan4_prev[5] !== nhan4_expected_prev[5] )
		&& ((nhan4_expected_prev[5] !== last_nhan4_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[5] = nhan4_expected_prev[5];
	end
	if (
		( nhan4_expected_prev[6] !== 1'bx ) && ( nhan4_prev[6] !== nhan4_expected_prev[6] )
		&& ((nhan4_expected_prev[6] !== last_nhan4_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[6] = nhan4_expected_prev[6];
	end
	if (
		( nhan4_expected_prev[7] !== 1'bx ) && ( nhan4_prev[7] !== nhan4_expected_prev[7] )
		&& ((nhan4_expected_prev[7] !== last_nhan4_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[7] = nhan4_expected_prev[7];
	end
	if (
		( nhan4_expected_prev[8] !== 1'bx ) && ( nhan4_prev[8] !== nhan4_expected_prev[8] )
		&& ((nhan4_expected_prev[8] !== last_nhan4_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[8] = nhan4_expected_prev[8];
	end
	if (
		( nhan4_expected_prev[9] !== 1'bx ) && ( nhan4_prev[9] !== nhan4_expected_prev[9] )
		&& ((nhan4_expected_prev[9] !== last_nhan4_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[9] = nhan4_expected_prev[9];
	end
	if (
		( nhan4_expected_prev[10] !== 1'bx ) && ( nhan4_prev[10] !== nhan4_expected_prev[10] )
		&& ((nhan4_expected_prev[10] !== last_nhan4_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[10] = nhan4_expected_prev[10];
	end
	if (
		( nhan4_expected_prev[11] !== 1'bx ) && ( nhan4_prev[11] !== nhan4_expected_prev[11] )
		&& ((nhan4_expected_prev[11] !== last_nhan4_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[11] = nhan4_expected_prev[11];
	end
	if (
		( nhan4_expected_prev[12] !== 1'bx ) && ( nhan4_prev[12] !== nhan4_expected_prev[12] )
		&& ((nhan4_expected_prev[12] !== last_nhan4_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[12] = nhan4_expected_prev[12];
	end
	if (
		( nhan4_expected_prev[13] !== 1'bx ) && ( nhan4_prev[13] !== nhan4_expected_prev[13] )
		&& ((nhan4_expected_prev[13] !== last_nhan4_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[13] = nhan4_expected_prev[13];
	end
	if (
		( nhan4_expected_prev[14] !== 1'bx ) && ( nhan4_prev[14] !== nhan4_expected_prev[14] )
		&& ((nhan4_expected_prev[14] !== last_nhan4_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[14] = nhan4_expected_prev[14];
	end
	if (
		( nhan4_expected_prev[15] !== 1'bx ) && ( nhan4_prev[15] !== nhan4_expected_prev[15] )
		&& ((nhan4_expected_prev[15] !== last_nhan4_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[15] = nhan4_expected_prev[15];
	end
	if (
		( nhan4_expected_prev[16] !== 1'bx ) && ( nhan4_prev[16] !== nhan4_expected_prev[16] )
		&& ((nhan4_expected_prev[16] !== last_nhan4_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[16] = nhan4_expected_prev[16];
	end
	if (
		( nhan4_expected_prev[17] !== 1'bx ) && ( nhan4_prev[17] !== nhan4_expected_prev[17] )
		&& ((nhan4_expected_prev[17] !== last_nhan4_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[17] = nhan4_expected_prev[17];
	end
	if (
		( nhan4_expected_prev[18] !== 1'bx ) && ( nhan4_prev[18] !== nhan4_expected_prev[18] )
		&& ((nhan4_expected_prev[18] !== last_nhan4_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[18] = nhan4_expected_prev[18];
	end
	if (
		( nhan4_expected_prev[19] !== 1'bx ) && ( nhan4_prev[19] !== nhan4_expected_prev[19] )
		&& ((nhan4_expected_prev[19] !== last_nhan4_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[19] = nhan4_expected_prev[19];
	end
	if (
		( nhan4_expected_prev[20] !== 1'bx ) && ( nhan4_prev[20] !== nhan4_expected_prev[20] )
		&& ((nhan4_expected_prev[20] !== last_nhan4_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[20] = nhan4_expected_prev[20];
	end
	if (
		( nhan4_expected_prev[21] !== 1'bx ) && ( nhan4_prev[21] !== nhan4_expected_prev[21] )
		&& ((nhan4_expected_prev[21] !== last_nhan4_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[21] = nhan4_expected_prev[21];
	end
	if (
		( nhan4_expected_prev[22] !== 1'bx ) && ( nhan4_prev[22] !== nhan4_expected_prev[22] )
		&& ((nhan4_expected_prev[22] !== last_nhan4_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[22] = nhan4_expected_prev[22];
	end
	if (
		( nhan4_expected_prev[23] !== 1'bx ) && ( nhan4_prev[23] !== nhan4_expected_prev[23] )
		&& ((nhan4_expected_prev[23] !== last_nhan4_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[23] = nhan4_expected_prev[23];
	end
	if (
		( nhan4_expected_prev[24] !== 1'bx ) && ( nhan4_prev[24] !== nhan4_expected_prev[24] )
		&& ((nhan4_expected_prev[24] !== last_nhan4_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[24] = nhan4_expected_prev[24];
	end
	if (
		( nhan4_expected_prev[25] !== 1'bx ) && ( nhan4_prev[25] !== nhan4_expected_prev[25] )
		&& ((nhan4_expected_prev[25] !== last_nhan4_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[25] = nhan4_expected_prev[25];
	end
	if (
		( nhan4_expected_prev[26] !== 1'bx ) && ( nhan4_prev[26] !== nhan4_expected_prev[26] )
		&& ((nhan4_expected_prev[26] !== last_nhan4_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[26] = nhan4_expected_prev[26];
	end
	if (
		( nhan4_expected_prev[27] !== 1'bx ) && ( nhan4_prev[27] !== nhan4_expected_prev[27] )
		&& ((nhan4_expected_prev[27] !== last_nhan4_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[27] = nhan4_expected_prev[27];
	end
	if (
		( nhan4_expected_prev[28] !== 1'bx ) && ( nhan4_prev[28] !== nhan4_expected_prev[28] )
		&& ((nhan4_expected_prev[28] !== last_nhan4_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[28] = nhan4_expected_prev[28];
	end
	if (
		( nhan4_expected_prev[29] !== 1'bx ) && ( nhan4_prev[29] !== nhan4_expected_prev[29] )
		&& ((nhan4_expected_prev[29] !== last_nhan4_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[29] = nhan4_expected_prev[29];
	end
	if (
		( nhan4_expected_prev[30] !== 1'bx ) && ( nhan4_prev[30] !== nhan4_expected_prev[30] )
		&& ((nhan4_expected_prev[30] !== last_nhan4_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[30] = nhan4_expected_prev[30];
	end
	if (
		( nhan4_expected_prev[31] !== 1'bx ) && ( nhan4_prev[31] !== nhan4_expected_prev[31] )
		&& ((nhan4_expected_prev[31] !== last_nhan4_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nhan4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nhan4_expected_prev);
		$display ("     Real value = %b", nhan4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nhan4_exp[31] = nhan4_expected_prev[31];
	end
	if (
		( tru1_expected_prev[0] !== 1'bx ) && ( tru1_prev[0] !== tru1_expected_prev[0] )
		&& ((tru1_expected_prev[0] !== last_tru1_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[0] = tru1_expected_prev[0];
	end
	if (
		( tru1_expected_prev[1] !== 1'bx ) && ( tru1_prev[1] !== tru1_expected_prev[1] )
		&& ((tru1_expected_prev[1] !== last_tru1_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[1] = tru1_expected_prev[1];
	end
	if (
		( tru1_expected_prev[2] !== 1'bx ) && ( tru1_prev[2] !== tru1_expected_prev[2] )
		&& ((tru1_expected_prev[2] !== last_tru1_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[2] = tru1_expected_prev[2];
	end
	if (
		( tru1_expected_prev[3] !== 1'bx ) && ( tru1_prev[3] !== tru1_expected_prev[3] )
		&& ((tru1_expected_prev[3] !== last_tru1_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[3] = tru1_expected_prev[3];
	end
	if (
		( tru1_expected_prev[4] !== 1'bx ) && ( tru1_prev[4] !== tru1_expected_prev[4] )
		&& ((tru1_expected_prev[4] !== last_tru1_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[4] = tru1_expected_prev[4];
	end
	if (
		( tru1_expected_prev[5] !== 1'bx ) && ( tru1_prev[5] !== tru1_expected_prev[5] )
		&& ((tru1_expected_prev[5] !== last_tru1_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[5] = tru1_expected_prev[5];
	end
	if (
		( tru1_expected_prev[6] !== 1'bx ) && ( tru1_prev[6] !== tru1_expected_prev[6] )
		&& ((tru1_expected_prev[6] !== last_tru1_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[6] = tru1_expected_prev[6];
	end
	if (
		( tru1_expected_prev[7] !== 1'bx ) && ( tru1_prev[7] !== tru1_expected_prev[7] )
		&& ((tru1_expected_prev[7] !== last_tru1_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[7] = tru1_expected_prev[7];
	end
	if (
		( tru1_expected_prev[8] !== 1'bx ) && ( tru1_prev[8] !== tru1_expected_prev[8] )
		&& ((tru1_expected_prev[8] !== last_tru1_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[8] = tru1_expected_prev[8];
	end
	if (
		( tru1_expected_prev[9] !== 1'bx ) && ( tru1_prev[9] !== tru1_expected_prev[9] )
		&& ((tru1_expected_prev[9] !== last_tru1_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[9] = tru1_expected_prev[9];
	end
	if (
		( tru1_expected_prev[10] !== 1'bx ) && ( tru1_prev[10] !== tru1_expected_prev[10] )
		&& ((tru1_expected_prev[10] !== last_tru1_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[10] = tru1_expected_prev[10];
	end
	if (
		( tru1_expected_prev[11] !== 1'bx ) && ( tru1_prev[11] !== tru1_expected_prev[11] )
		&& ((tru1_expected_prev[11] !== last_tru1_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[11] = tru1_expected_prev[11];
	end
	if (
		( tru1_expected_prev[12] !== 1'bx ) && ( tru1_prev[12] !== tru1_expected_prev[12] )
		&& ((tru1_expected_prev[12] !== last_tru1_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[12] = tru1_expected_prev[12];
	end
	if (
		( tru1_expected_prev[13] !== 1'bx ) && ( tru1_prev[13] !== tru1_expected_prev[13] )
		&& ((tru1_expected_prev[13] !== last_tru1_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[13] = tru1_expected_prev[13];
	end
	if (
		( tru1_expected_prev[14] !== 1'bx ) && ( tru1_prev[14] !== tru1_expected_prev[14] )
		&& ((tru1_expected_prev[14] !== last_tru1_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[14] = tru1_expected_prev[14];
	end
	if (
		( tru1_expected_prev[15] !== 1'bx ) && ( tru1_prev[15] !== tru1_expected_prev[15] )
		&& ((tru1_expected_prev[15] !== last_tru1_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[15] = tru1_expected_prev[15];
	end
	if (
		( tru1_expected_prev[16] !== 1'bx ) && ( tru1_prev[16] !== tru1_expected_prev[16] )
		&& ((tru1_expected_prev[16] !== last_tru1_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[16] = tru1_expected_prev[16];
	end
	if (
		( tru1_expected_prev[17] !== 1'bx ) && ( tru1_prev[17] !== tru1_expected_prev[17] )
		&& ((tru1_expected_prev[17] !== last_tru1_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[17] = tru1_expected_prev[17];
	end
	if (
		( tru1_expected_prev[18] !== 1'bx ) && ( tru1_prev[18] !== tru1_expected_prev[18] )
		&& ((tru1_expected_prev[18] !== last_tru1_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[18] = tru1_expected_prev[18];
	end
	if (
		( tru1_expected_prev[19] !== 1'bx ) && ( tru1_prev[19] !== tru1_expected_prev[19] )
		&& ((tru1_expected_prev[19] !== last_tru1_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[19] = tru1_expected_prev[19];
	end
	if (
		( tru1_expected_prev[20] !== 1'bx ) && ( tru1_prev[20] !== tru1_expected_prev[20] )
		&& ((tru1_expected_prev[20] !== last_tru1_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[20] = tru1_expected_prev[20];
	end
	if (
		( tru1_expected_prev[21] !== 1'bx ) && ( tru1_prev[21] !== tru1_expected_prev[21] )
		&& ((tru1_expected_prev[21] !== last_tru1_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[21] = tru1_expected_prev[21];
	end
	if (
		( tru1_expected_prev[22] !== 1'bx ) && ( tru1_prev[22] !== tru1_expected_prev[22] )
		&& ((tru1_expected_prev[22] !== last_tru1_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[22] = tru1_expected_prev[22];
	end
	if (
		( tru1_expected_prev[23] !== 1'bx ) && ( tru1_prev[23] !== tru1_expected_prev[23] )
		&& ((tru1_expected_prev[23] !== last_tru1_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[23] = tru1_expected_prev[23];
	end
	if (
		( tru1_expected_prev[24] !== 1'bx ) && ( tru1_prev[24] !== tru1_expected_prev[24] )
		&& ((tru1_expected_prev[24] !== last_tru1_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[24] = tru1_expected_prev[24];
	end
	if (
		( tru1_expected_prev[25] !== 1'bx ) && ( tru1_prev[25] !== tru1_expected_prev[25] )
		&& ((tru1_expected_prev[25] !== last_tru1_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[25] = tru1_expected_prev[25];
	end
	if (
		( tru1_expected_prev[26] !== 1'bx ) && ( tru1_prev[26] !== tru1_expected_prev[26] )
		&& ((tru1_expected_prev[26] !== last_tru1_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[26] = tru1_expected_prev[26];
	end
	if (
		( tru1_expected_prev[27] !== 1'bx ) && ( tru1_prev[27] !== tru1_expected_prev[27] )
		&& ((tru1_expected_prev[27] !== last_tru1_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[27] = tru1_expected_prev[27];
	end
	if (
		( tru1_expected_prev[28] !== 1'bx ) && ( tru1_prev[28] !== tru1_expected_prev[28] )
		&& ((tru1_expected_prev[28] !== last_tru1_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[28] = tru1_expected_prev[28];
	end
	if (
		( tru1_expected_prev[29] !== 1'bx ) && ( tru1_prev[29] !== tru1_expected_prev[29] )
		&& ((tru1_expected_prev[29] !== last_tru1_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[29] = tru1_expected_prev[29];
	end
	if (
		( tru1_expected_prev[30] !== 1'bx ) && ( tru1_prev[30] !== tru1_expected_prev[30] )
		&& ((tru1_expected_prev[30] !== last_tru1_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[30] = tru1_expected_prev[30];
	end
	if (
		( tru1_expected_prev[31] !== 1'bx ) && ( tru1_prev[31] !== tru1_expected_prev[31] )
		&& ((tru1_expected_prev[31] !== last_tru1_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tru1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tru1_expected_prev);
		$display ("     Real value = %b", tru1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_tru1_exp[31] = tru1_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module converterRGB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] B;
reg [31:0] G;
reg [31:0] R;
reg clk;
// wires                                               
wire [31:0] Cb;
wire [31:0] Cr;
wire [31:0] Y;
wire done1;
wire done2;
wire done3;
wire done4;
wire [31:0] nhan1;
wire [31:0] nhan2;
wire [31:0] nhan3;
wire [31:0] nhan4;
wire [31:0] tru1;

wire sampler;                             

// assign statements (if any)                          
converterRGB i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.Cb(Cb),
	.Cr(Cr),
	.G(G),
	.R(R),
	.Y(Y),
	.clk(clk),
	.done1(done1),
	.done2(done2),
	.done3(done3),
	.done4(done4),
	.nhan1(nhan1),
	.nhan2(nhan2),
	.nhan3(nhan3),
	.nhan4(nhan4),
	.tru1(tru1)
);
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b1;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b1;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b1;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b1;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b1;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// G[ 31 ]
initial
begin
	G[31] = 1'b0;
end 
// G[ 30 ]
initial
begin
	G[30] = 1'b1;
end 
// G[ 29 ]
initial
begin
	G[29] = 1'b0;
end 
// G[ 28 ]
initial
begin
	G[28] = 1'b0;
end 
// G[ 27 ]
initial
begin
	G[27] = 1'b0;
end 
// G[ 26 ]
initial
begin
	G[26] = 1'b0;
end 
// G[ 25 ]
initial
begin
	G[25] = 1'b0;
end 
// G[ 24 ]
initial
begin
	G[24] = 1'b1;
end 
// G[ 23 ]
initial
begin
	G[23] = 1'b0;
end 
// G[ 22 ]
initial
begin
	G[22] = 1'b1;
end 
// G[ 21 ]
initial
begin
	G[21] = 1'b1;
end 
// G[ 20 ]
initial
begin
	G[20] = 1'b1;
end 
// G[ 19 ]
initial
begin
	G[19] = 1'b0;
end 
// G[ 18 ]
initial
begin
	G[18] = 1'b0;
end 
// G[ 17 ]
initial
begin
	G[17] = 1'b0;
end 
// G[ 16 ]
initial
begin
	G[16] = 1'b0;
end 
// G[ 15 ]
initial
begin
	G[15] = 1'b0;
end 
// G[ 14 ]
initial
begin
	G[14] = 1'b0;
end 
// G[ 13 ]
initial
begin
	G[13] = 1'b0;
end 
// G[ 12 ]
initial
begin
	G[12] = 1'b0;
end 
// G[ 11 ]
initial
begin
	G[11] = 1'b0;
end 
// G[ 10 ]
initial
begin
	G[10] = 1'b0;
end 
// G[ 9 ]
initial
begin
	G[9] = 1'b0;
end 
// G[ 8 ]
initial
begin
	G[8] = 1'b0;
end 
// G[ 7 ]
initial
begin
	G[7] = 1'b0;
end 
// G[ 6 ]
initial
begin
	G[6] = 1'b0;
end 
// G[ 5 ]
initial
begin
	G[5] = 1'b0;
end 
// G[ 4 ]
initial
begin
	G[4] = 1'b0;
end 
// G[ 3 ]
initial
begin
	G[3] = 1'b0;
end 
// G[ 2 ]
initial
begin
	G[2] = 1'b0;
end 
// G[ 1 ]
initial
begin
	G[1] = 1'b0;
end 
// G[ 0 ]
initial
begin
	G[0] = 1'b0;
end 
// R[ 31 ]
initial
begin
	R[31] = 1'b0;
end 
// R[ 30 ]
initial
begin
	R[30] = 1'b1;
end 
// R[ 29 ]
initial
begin
	R[29] = 1'b0;
end 
// R[ 28 ]
initial
begin
	R[28] = 1'b0;
end 
// R[ 27 ]
initial
begin
	R[27] = 1'b0;
end 
// R[ 26 ]
initial
begin
	R[26] = 1'b0;
end 
// R[ 25 ]
initial
begin
	R[25] = 1'b1;
end 
// R[ 24 ]
initial
begin
	R[24] = 1'b1;
end 
// R[ 23 ]
initial
begin
	R[23] = 1'b0;
end 
// R[ 22 ]
initial
begin
	R[22] = 1'b1;
end 
// R[ 21 ]
initial
begin
	R[21] = 1'b1;
end 
// R[ 20 ]
initial
begin
	R[20] = 1'b1;
end 
// R[ 19 ]
initial
begin
	R[19] = 1'b1;
end 
// R[ 18 ]
initial
begin
	R[18] = 1'b1;
end 
// R[ 17 ]
initial
begin
	R[17] = 1'b1;
end 
// R[ 16 ]
initial
begin
	R[16] = 1'b1;
end 
// R[ 15 ]
initial
begin
	R[15] = 1'b0;
end 
// R[ 14 ]
initial
begin
	R[14] = 1'b0;
end 
// R[ 13 ]
initial
begin
	R[13] = 1'b0;
end 
// R[ 12 ]
initial
begin
	R[12] = 1'b0;
end 
// R[ 11 ]
initial
begin
	R[11] = 1'b0;
end 
// R[ 10 ]
initial
begin
	R[10] = 1'b0;
end 
// R[ 9 ]
initial
begin
	R[9] = 1'b0;
end 
// R[ 8 ]
initial
begin
	R[8] = 1'b0;
end 
// R[ 7 ]
initial
begin
	R[7] = 1'b0;
end 
// R[ 6 ]
initial
begin
	R[6] = 1'b0;
end 
// R[ 5 ]
initial
begin
	R[5] = 1'b0;
end 
// R[ 4 ]
initial
begin
	R[4] = 1'b0;
end 
// R[ 3 ]
initial
begin
	R[3] = 1'b0;
end 
// R[ 2 ]
initial
begin
	R[2] = 1'b0;
end 
// R[ 1 ]
initial
begin
	R[1] = 1'b0;
end 
// R[ 0 ]
initial
begin
	R[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

converterRGB_vlg_sample_tst tb_sample (
	.B(B),
	.G(G),
	.R(R),
	.clk(clk),
	.sampler_tx(sampler)
);

converterRGB_vlg_check_tst tb_out(
	.Cb(Cb),
	.Cr(Cr),
	.Y(Y),
	.done1(done1),
	.done2(done2),
	.done3(done3),
	.done4(done4),
	.nhan1(nhan1),
	.nhan2(nhan2),
	.nhan3(nhan3),
	.nhan4(nhan4),
	.tru1(tru1),
	.sampler_rx(sampler)
);
endmodule

